<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>coderjzf</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-17T12:29:10.855Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>coderjzf</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring(四):AOP</title>
    <link href="http://yoursite.com/spring4/"/>
    <id>http://yoursite.com/spring4/</id>
    <published>2017-06-17T12:09:45.000Z</published>
    <updated>2017-06-17T12:29:10.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、AOP简介"><a href="#一、AOP简介" class="headerlink" title="一、AOP简介"></a>一、AOP简介</h2><h3 id="1-1-AOP是什么"><a href="#1-1-AOP是什么" class="headerlink" title="1.1 AOP是什么"></a>1.1 AOP是什么</h3><p><em>AOP:面向切面编程思想，是对传统OOP的补充。通过AOP可以将核心关注点和横切关注点分离开。利用AOP可以完成权限校验,日志记录,性能监控,事务控制等功能。</em><br><a id="more"></a><br>Spring中AOP的底层实现：</p>
<ul>
<li>jdk动态代理:针对实现了接口的类产生代理对象</li>
<li>Cglib动态代理:针对没有实现接口的类产生代理对象</li>
</ul>
<h3 id="1-2-Spring-AOP中的一些重要概念"><a href="#1-2-Spring-AOP中的一些重要概念" class="headerlink" title="1.2 Spring AOP中的一些重要概念"></a>1.2 Spring AOP中的一些重要概念</h3><ul>
<li><strong>横切关注点(cross-cutting concern)</strong>:散布于应用程序中多处的<strong>功能</strong>(需求)被称<br>为横切关注点从概念上来看是与<strong>业务逻辑</strong>相分离的。把横切关注点与业务逻辑代码分离开来是面向切面编程所要解决的问题。</li>
<li><strong>切面(aspect)</strong>:横切关注点(一些共同需求)被模块化之后的特殊对象(通知和切点的结合)</li>
<li><strong>通知(advice)</strong>:切面是什么(切面必须完成的功能),切面什么时候被使用。具体来说就是拦截到方法后执行的代码。</li>
<li><strong>目标(target)</strong>:<strong>被通知</strong>的对象。</li>
<li><strong>代理(proxy)</strong>:对目标对象应用通知后生成的<strong>代理对象</strong>。</li>
<li><strong>连接点(JoinPoint)</strong>:应用程序有数以千计的时间可以被应用通知，这些时机被称为连接点。<strong>具体来说就是可以被应用通知的方法。</strong></li>
<li><strong>切点(pointcut)</strong>: 一个切面并不需要通知所有的连接点，切点缩小了所需通知的连接点的范围。</li>
<li><strong>织入(wave)</strong>:<strong>将通知应用</strong>到目标对象的<strong>过程</strong>。</li>
</ul>
<h3 id="1-3-使用AOP的好处"><a href="#1-3-使用AOP的好处" class="headerlink" title="1.3 使用AOP的好处"></a>1.3 使用AOP的好处</h3><ol>
<li>横切关注点被集中于一个地方(切面)，而不是分散到多处代码中</li>
<li>服务模块更简洁，服务模块只需关注与业务逻辑相关的代码</li>
</ol>
<h3 id="1-4-Spring对AOP的支持"><a href="#1-4-Spring对AOP的支持" class="headerlink" title="1.4 Spring对AOP的支持"></a>1.4 Spring对AOP的支持</h3><ul>
<li>基于代理的经典AOP</li>
<li>纯POJO切面(基于XML，将纯POJO转换成切面)</li>
<li>@AspectJ注解驱动的切面(通过AspectJ提供注解驱动的AOP，本质上仍然是Spring基于代理的AOP)</li>
<li>注入式AspectJ注解驱动</li>
</ul>
<p>前三种都是Spring AOP实现的变体，Spring AOP构建在动态代理的基础之上。因此Spring对AOP的支持仅限于方法拦截<br>如果要实现更高的需求,如构造器或者属性拦截，则需要使用注入式AspectJ注解来实现切面，即注入式AspectJ注解驱动</p>
<h3 id="1-5-通知的分类"><a href="#1-5-通知的分类" class="headerlink" title="1.5 通知的分类"></a>1.5 通知的分类</h3><p>Spring AOP提供了五种通知类型，分别是：</p>
<ul>
<li>前置通知：目标方法执行之前执行</li>
<li>后置通知：目标方法执行之后执行，无论方法是否出现异常;无法得到返回值,因为可能抛出异常</li>
<li>返回通知：目标方法正常执行返回后执行</li>
<li>异常通知：目标方法抛出异常时执行</li>
<li>环绕通知：通知方法会将目标方法封装起来，在目标方法执行之前与执行之后执行</li>
</ul>
<h2 id="二、使用注解配置AOP"><a href="#二、使用注解配置AOP" class="headerlink" title="二、使用注解配置AOP"></a>二、使用注解配置AOP</h2><h3 id="2-1-基本步骤"><a href="#2-1-基本步骤" class="headerlink" title="2.1 基本步骤"></a>2.1 基本步骤</h3><h4 id="2-1-1-创建切面"><a href="#2-1-1-创建切面" class="headerlink" title="2.1.1 创建切面"></a>2.1.1 创建切面</h4><p>使用@Aspect注解声明切面</p>
<h4 id="2-1-2-创建切点"><a href="#2-1-2-创建切点" class="headerlink" title="2.1.2 创建切点"></a>2.1.2 创建切点</h4><p>通过切点来选择连接点(使用AspectJ切点表达式语言)<br>AspectJ指示器execution()：用于匹配是连接点的方法</p>
<p><strong>切点表达式</strong>的使用规则：<br>execution(modifiers-pattern? ret-type-pattern declaring-type-pattern? name-pattern(param-pattern) throws-pattern?)</p>
<p>规则解释：</p>
<ul>
<li>有“?”号的部分表示可省略的。</li>
<li>modifers-pattern表示修饰符如public、protected等。</li>
<li>ret-type-pattern表示方法返回类型。</li>
<li>declaring-type-pattern代表特定的类。</li>
<li>name-pattern代表方法名称，param-pattern表示参数。</li>
<li>throws-pattern表示抛出的异常。</li>
<li>在切点表达式中，可以使用*来代表任意字符，用..来表示任意个参数。</li>
</ul>
<p>当切点被重复使用时，可以使用@ponintcut注解声明可重用的切点<br><img src="/spring4/pointcut.png" alt="pointcut"><br>在使用切点时，用方法名作为切点名。</p>
<h4 id="2-1-3-启用自动代理功能"><a href="#2-1-3-启用自动代理功能" class="headerlink" title="2.1.3 启用自动代理功能"></a>2.1.3 启用自动代理功能</h4><p>在applicationContext.xml文件中使用aop命名空间中的<code>&lt;aop:aspectj-autoproxy /&gt;</code>来启用自动代理</p>
<h3 id="2-2-示例"><a href="#2-2-示例" class="headerlink" title="2.2 示例"></a>2.2 示例</h3><h4 id="2-2-1-准备工作"><a href="#2-2-1-准备工作" class="headerlink" title="2.2.1 准备工作"></a>2.2.1 准备工作</h4><h5 id="2-2-1-1-开发环境"><a href="#2-2-1-1-开发环境" class="headerlink" title="2.2.1.1 开发环境"></a>2.2.1.1 开发环境</h5><p>Eclipse Neon+JDK1.8</p>
<h5 id="2-2-1-2-导入相关jar包"><a href="#2-2-1-2-导入相关jar包" class="headerlink" title="2.2.1.2 导入相关jar包"></a>2.2.1.2 导入相关jar包</h5><ul>
<li>spring-aop-4.2.4.RELEASE.jar</li>
<li>spring-aspects-4.2.4.RELEASE.jar    </li>
<li>spring-beans-4.2.4.RELEASE.jar    </li>
<li>spring-context-4.2.4.RELEASE.jar</li>
<li>spring-context-support-4.2.4.RELEASE.jar</li>
<li>spring-core-4.2.4.RELEASE.jar</li>
<li>spring-expression-4.2.4.RELEASE.jar</li>
<li>com.springsource.org.apache.commons.logging-1.1.1.jar (日志支持jar包)</li>
<li>com.springsource.org.aopalliance-1.0.0.jar (aop依赖包)</li>
<li>com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar(aop依赖包)</li>
</ul>
<h5 id="2-2-1-3-工程结构"><a href="#2-2-1-3-工程结构" class="headerlink" title="2.2.1.3 工程结构"></a>2.2.1.3 工程结构</h5><p><img src="/spring4/project.png" alt="project"></p>
<h3 id="2-2-2-目标对象"><a href="#2-2-2-目标对象" class="headerlink" title="2.2.2 目标对象"></a>2.2.2 目标对象</h3><p>接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> jzf.spring.bean;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calculator</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> i,<span class="keyword">double</span> j)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">sub</span><span class="params">(<span class="keyword">double</span> i,<span class="keyword">double</span> j)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">mul</span><span class="params">(<span class="keyword">double</span> i,<span class="keyword">double</span> j)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">div</span><span class="params">(<span class="keyword">double</span> i,<span class="keyword">double</span> j)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>目标对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> jzf.spring.bean;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorImp</span> <span class="keyword">implements</span> <span class="title">Calculator</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> i, <span class="keyword">double</span> j)</span> </span>&#123;</div><div class="line">        <span class="keyword">double</span> result = i + j;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">sub</span><span class="params">(<span class="keyword">double</span> i, <span class="keyword">double</span> j)</span> </span>&#123;</div><div class="line">        <span class="keyword">double</span> result = i - j;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">mul</span><span class="params">(<span class="keyword">double</span> i, <span class="keyword">double</span> j)</span> </span>&#123;</div><div class="line">        <span class="keyword">double</span> result = i * j;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">div</span><span class="params">(<span class="keyword">double</span> i, <span class="keyword">double</span> j)</span> </span>&#123;</div><div class="line">        <span class="keyword">double</span> result = i / j;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-2-3-切面-通知-对象"><a href="#2-2-3-切面-通知-对象" class="headerlink" title="2.2.3 切面(通知)对象"></a>2.2.3 切面(通知)对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> jzf.spring.bean;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterReturning;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterThrowing;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@Aspect</span> <span class="comment">// 声明为切面类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingAspect</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">// 定义一个可重用的切点</span></div><div class="line">	<span class="meta">@Pointcut</span>(value=<span class="string">"execution(public double  jzf.spring.bean.CalculatorImp.*(double,double))"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointcut</span><span class="params">()</span> </span>&#123;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/*</span></div><div class="line">	声明前置通知方法(目标方法执行之前执行) </div><div class="line">	JoinPoint:连接点，通过这个类可以得到关于拦截到的方法名等信息</div><div class="line">	*/</div><div class="line">	<span class="meta">@Before</span>(value=<span class="string">"pointcut()"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeMethod</span><span class="params">(JoinPoint jp)</span> </span>&#123;</div><div class="line">		String methodName = jp.getSignature().getName();</div><div class="line">		List&lt;Object&gt; list = (List&lt;Object&gt;) Arrays.asList(jp.getArgs());<span class="comment">// 得到方法的参数</span></div><div class="line">		System.out.println(methodName + <span class="string">" begin with"</span> + list);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 后置通知方法(目标方法执行之后执行，无论方法是否出现异常;无法得到返回值,因为可能抛出异常)</span></div><div class="line">	<span class="meta">@After</span>(<span class="string">"pointcut()"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterMethod</span><span class="params">(JoinPoint jp)</span> </span>&#123;</div><div class="line">		String methodName = jp.getSignature().getName();</div><div class="line">		System.out.println(methodName + <span class="string">" end"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 *  返回通知方法 </div><div class="line">	 *  returning:返回值</div><div class="line">	 */</div><div class="line">	<span class="meta">@AfterReturning</span>(value = <span class="string">"pointcut()"</span>, returning = <span class="string">"result"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(JoinPoint jp, <span class="keyword">double</span> result)</span> </span>&#123;</div><div class="line">		String methodName = jp.getSignature().getName();</div><div class="line">		System.out.println(methodName + <span class="string">" return with:"</span> + result);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 异常通知方法 </span></div><div class="line">	<span class="comment">//throwing:抛出的异常</span></div><div class="line"></div><div class="line">	<span class="meta">@AfterThrowing</span>(value = <span class="string">"pointcut()"</span>, throwing = <span class="string">"ex"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">throwException</span><span class="params">(JoinPoint jp, Exception ex)</span> </span>&#123;</div><div class="line">		String methodName = jp.getSignature().getName();</div><div class="line">		System.out.println(methodName + <span class="string">" occurs exception: "</span> + ex);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 环绕通知 ProceedingJoinPoint:必须通过调用这个类proceed方法，让被拦截的方法继续执行</div><div class="line">	 * returnValue:ProceedingJoinPoint的proceed方法的返回值就是被拦截方法的返回值</div><div class="line">	 */</div><div class="line">	<span class="meta">@Around</span>(value = <span class="string">"pointcut()"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">		System.out.println(<span class="string">"环绕通知方法执行前"</span>);</div><div class="line">		Object returnValue = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			returnValue = pjp.proceed();</div><div class="line">			System.out.println(returnValue);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		System.out.println(<span class="string">"环绕通知方法执行后"</span>);</div><div class="line">		<span class="keyword">return</span> returnValue;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-2-4-配置文件"><a href="#2-2-4-配置文件" class="headerlink" title="2.2.4 配置文件"></a>2.2.4 配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">	<span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	<span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span></div><div class="line">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd</div><div class="line">		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd"&gt;</div><div class="line">	</div><div class="line"><span class="comment">&lt;!-- 开启组件自动扫描：</span></div><div class="line">	 base-package:spring会扫描该包即其子包中所有类的注解 --&gt;</div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"jzf.spring.bean"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 启用@AsjectJ支持 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="三、使用xml文件配置AOP"><a href="#三、使用xml文件配置AOP" class="headerlink" title="三、使用xml文件配置AOP"></a>三、使用xml文件配置AOP</h2><h3 id="3-1-目标对象"><a href="#3-1-目标对象" class="headerlink" title="3.1 目标对象"></a>3.1 目标对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> jzf.spring.test2;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorImp</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> i, <span class="keyword">double</span> j)</span> </span>&#123;</div><div class="line">        <span class="keyword">double</span> result = i + j;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">sub</span><span class="params">(<span class="keyword">double</span> i, <span class="keyword">double</span> j)</span> </span>&#123;</div><div class="line">        <span class="keyword">double</span> result = i - j;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">mul</span><span class="params">(<span class="keyword">double</span> i, <span class="keyword">double</span> j)</span> </span>&#123;</div><div class="line">        <span class="keyword">double</span> result = i * j;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">div</span><span class="params">(<span class="keyword">double</span> i, <span class="keyword">double</span> j)</span> </span>&#123;</div><div class="line">        <span class="keyword">double</span> result = i / j;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="3-2-切面类"><a href="#3-2-切面类" class="headerlink" title="3.2 切面类"></a>3.2 切面类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> jzf.spring.test2;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggingAspect</span> </span>&#123;</div><div class="line">	<span class="comment">//前置通知方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeMethod</span><span class="params">(JoinPoint jp)</span> </span>&#123;</div><div class="line">		String methodName = jp.getSignature().getName();</div><div class="line">		List&lt;Object&gt; list =Arrays.asList(jp.getArgs());</div><div class="line">		System.out.println(methodName+<span class="string">" begin with "</span>+list);</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//后置通知方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterMethod</span><span class="params">(JoinPoint jp)</span> </span>&#123;</div><div class="line">		String methodName = jp.getSignature().getName();</div><div class="line">		System.out.println(methodName+<span class="string">" end"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">//返回通知方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(JoinPoint jp,<span class="keyword">double</span> result)</span> </span>&#123;</div><div class="line">		String methodName = jp.getSignature().getName();</div><div class="line">		System.out.println(methodName+<span class="string">" return with "</span>+result);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//异常通知方法</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">throwException</span><span class="params">(Exception ex)</span> </span>&#123;</div><div class="line">		System.out.println(ex.getStackTrace());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 环绕通知 ProceedingJoinPoint:必须通过调用这个类proceed方法，让被拦截的方法继续执行</div><div class="line">	 * returnValue:ProceedingJoinPoint的proceed方法的返回值就是被拦截方法的返回值</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">		System.out.println(<span class="string">"环绕通知方法执行前"</span>);</div><div class="line">		Object returnValue = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			returnValue = pjp.proceed();</div><div class="line">			System.out.println(returnValue);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		System.out.println(<span class="string">"环绕通知方法执行后"</span>);</div><div class="line">		<span class="keyword">return</span> returnValue;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-3-配置文件"><a href="#3-3-配置文件" class="headerlink" title="3.3 配置文件"></a>3.3 配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">	<span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">	<span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span></div><div class="line">		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd</div><div class="line">		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd"&gt;</div><div class="line"><span class="comment">&lt;!-- 目标对象 --&gt;</span>	</div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"calculatorImp"</span> <span class="attr">class</span>=<span class="string">"jzf.spring.test2.CalculatorImp"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 切面 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"log"</span> <span class="attr">class</span>=<span class="string">"jzf.spring.test2.LoggingAspect"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 用切点表达式配置切点 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(public double jzf.spring.test2.*.*(double, double))"</span> </span></div><div class="line">		<span class="attr">id</span>=<span class="string">"pc"</span>/&gt;</div><div class="line">	<span class="comment">&lt;!-- </span></div><div class="line">		配置切面</div><div class="line">		method:指定通知方法</div><div class="line">		pointcut-ref：引用已定义的切点</div><div class="line">	--&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"log"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beforeMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"afterMethod"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"afterReturning"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc"</span> <span class="attr">returning</span>=<span class="string">"result"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"throwException"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"around"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、AOP简介&quot;&gt;&lt;a href=&quot;#一、AOP简介&quot; class=&quot;headerlink&quot; title=&quot;一、AOP简介&quot;&gt;&lt;/a&gt;一、AOP简介&lt;/h2&gt;&lt;h3 id=&quot;1-1-AOP是什么&quot;&gt;&lt;a href=&quot;#1-1-AOP是什么&quot; class=&quot;headerlink&quot; title=&quot;1.1 AOP是什么&quot;&gt;&lt;/a&gt;1.1 AOP是什么&lt;/h3&gt;&lt;p&gt;&lt;em&gt;AOP:面向切面编程思想，是对传统OOP的补充。通过AOP可以将核心关注点和横切关注点分离开。利用AOP可以完成权限校验,日志记录,性能监控,事务控制等功能。&lt;/em&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring(三):使用注解配置&amp;整合JUnit测试</title>
    <link href="http://yoursite.com/spring3/"/>
    <id>http://yoursite.com/spring3/</id>
    <published>2017-06-16T15:05:41.000Z</published>
    <updated>2017-06-16T15:15:56.707Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、使用注解代替xml配置"><a href="#一、使用注解代替xml配置" class="headerlink" title="一、使用注解代替xml配置"></a>一、使用注解代替xml配置</h2><a id="more"></a>
<h3 id="1-1-使用注解代替xml配置将对象交给容器管理："><a href="#1-1-使用注解代替xml配置将对象交给容器管理：" class="headerlink" title="1.1 使用注解代替xml配置将对象交给容器管理："></a>1.1 使用注解代替xml配置将对象交给容器管理：</h3><h4 id="1-1-1-导包-导入命名空间-约束"><a href="#1-1-1-导包-导入命名空间-约束" class="headerlink" title="1.1.1 导包+导入命名空间(约束)"></a>1.1.1 导包+导入命名空间(约束)</h4><ul>
<li>Spring中使用注解需要spring aop包的支持，如：spring-aop-4.2.4.RELEASE.jar</li>
<li>还需要导入context命名空间(约束)</li>
</ul>
<h4 id="1-1-2-开启组件自动扫描"><a href="#1-1-2-开启组件自动扫描" class="headerlink" title="1.1.2.开启组件自动扫描"></a>1.1.2.开启组件自动扫描</h4><p><img src="/spring3/componentscan.png" alt="componentscan"></p>
<h4 id="1-1-3-给需要交给容器管理的对象打上注解"><a href="#1-1-3-给需要交给容器管理的对象打上注解" class="headerlink" title="1.1.3 给需要交给容器管理的对象打上注解"></a>1.1.3 给需要交给容器管理的对象打上注解</h4><p><img src="/spring3/component.png" alt="component"></p>
<p>Spring提供了四种对象注解，<strong>作用一样</strong>，只是如果各层对象都是有同一种注解，不便于区分，所以提供了以下注解：</p>
<ul>
<li>@Component</li>
<li>Web层：@Control</li>
<li>Service层：@service</li>
<li>Dao层：@Reposity</li>
</ul>
<h3 id="1-2-属性注入："><a href="#1-2-属性注入：" class="headerlink" title="1.2 属性注入："></a>1.2 属性注入：</h3><h4 id="1-2-1简单类型注入："><a href="#1-2-1简单类型注入：" class="headerlink" title="1.2.1简单类型注入："></a>1.2.1简单类型注入：</h4><p>@Value：@Value()注解只有一个value属性，可省略不写</p>
<p>例：给User的name,age属性注入简单类型的值<br><img src="/spring3/value.png" alt="value"></p>
<p>对属性进行赋值，也可以将注解写在set方法上<br>例：<br><img src="/spring3/value2.png" alt="value2"></p>
<h4 id="1-2-2-引用类型注入"><a href="#1-2-2-引用类型注入" class="headerlink" title="1.2.2 引用类型注入"></a>1.2.2 引用类型注入</h4><h5 id="1-2-2-1-注入方法一："><a href="#1-2-2-1-注入方法一：" class="headerlink" title="1.2.2.1 注入方法一："></a>1.2.2.1 注入方法一：</h5><p>@AutoWired:自动装配，spring容器会寻找符合属性类型的对象并注入(前提是对象需要被容器管理)<br>@Qualifier：使用@AutoWired时，若容器中有多个符合属性类型的对象时，用来指定@AutoWired自动装配的对象名</p>
<p>例：给User的car属性注入引用类型的值：<br><img src="/spring3/autowired.png" alt="autowired"></p>
<h5 id="1-2-2-2-注入方法二："><a href="#1-2-2-2-注入方法二：" class="headerlink" title="1.2.2.2 注入方法二："></a>1.2.2.2 注入方法二：</h5><p>使用@Resource注解指定装配的对象名</p>
<p>例：<br><img src="/spring3/resource.png" alt="resource"></p>
<h3 id="1-3-配置初始化与销毁方法"><a href="#1-3-配置初始化与销毁方法" class="headerlink" title="1.3 配置初始化与销毁方法"></a>1.3 配置初始化与销毁方法</h3><p>@PostConstruct:指定方法为初始化方法<br>@PreDestroy:指定方法为销毁方法</p>
<p>例：<br><img src="/spring3/life.png" alt="life"></p>
<h3 id="1-4-设置对象的scope属性"><a href="#1-4-设置对象的scope属性" class="headerlink" title="1.4 设置对象的scope属性"></a>1.4 设置对象的scope属性</h3><p>@Scope:使用@Scope注解，通过子属性scopeName来指定scope属性</p>
<p>例：<br><img src="/spring3/scope.png" alt="scope"></p>
<h2 id="二、Spring整合JUnit测试"><a href="#二、Spring整合JUnit测试" class="headerlink" title="二、Spring整合JUnit测试"></a>二、Spring整合JUnit测试</h2><h3 id="2-1-导入支持Spring-JUnit测试的test包-如：spring-test-4-2-4-RELEASE-jar"><a href="#2-1-导入支持Spring-JUnit测试的test包-如：spring-test-4-2-4-RELEASE-jar" class="headerlink" title="2.1 导入支持Spring JUnit测试的test包,如：spring-test-4.2.4.RELEASE.jar"></a>2.1 导入支持Spring JUnit测试的test包,如：spring-test-4.2.4.RELEASE.jar</h3><h3 id="2-2-实体类"><a href="#2-2-实体类" class="headerlink" title="2.2 实体类"></a>2.2 实体类</h3><p>User:<br><img src="/spring3/user.png" alt="user"></p>
<p>Car:<br><img src="/spring3/car.png" alt="car"></p>
<h3 id="2-3-测试程序"><a href="#2-3-测试程序" class="headerlink" title="2.3 测试程序"></a>2.3 测试程序</h3><p><img src="/spring3/demo.png" alt="demo"></p>
<h3 id="2-4-输出"><a href="#2-4-输出" class="headerlink" title="2.4 输出"></a>2.4 输出</h3><p><img src="/spring3/log.png" alt="log"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、使用注解代替xml配置&quot;&gt;&lt;a href=&quot;#一、使用注解代替xml配置&quot; class=&quot;headerlink&quot; title=&quot;一、使用注解代替xml配置&quot;&gt;&lt;/a&gt;一、使用注解代替xml配置&lt;/h2&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring(二):IoC&amp;DI</title>
    <link href="http://yoursite.com/spring2/"/>
    <id>http://yoursite.com/spring2/</id>
    <published>2017-06-16T14:48:54.000Z</published>
    <updated>2017-06-17T09:42:55.159Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、IoC-amp-DI是什么"><a href="#一、IoC-amp-DI是什么" class="headerlink" title="一、IoC&amp;DI是什么"></a>一、IoC&amp;DI是什么</h2><h3 id="1-1-IoC-Inverse-Of-Control-反转控制-："><a href="#1-1-IoC-Inverse-Of-Control-反转控制-：" class="headerlink" title="1.1 IoC:Inverse Of Control(反转控制)："></a>1.1 IoC:Inverse Of Control(反转控制)：</h3><a id="more"></a>
<ul>
<li>传统的对象创建方式：对象的创建都是由程序员自己开发，对象之间的依赖关系也是由程序员来注入。</li>
<li>IoC:反转了对象的创建方式，对象的创建与对象之间的依赖的关系都交由Spring容器管理。</li>
</ul>
<h3 id="1-2-DI-Dependency-Injection-依赖注入-："><a href="#1-2-DI-Dependency-Injection-依赖注入-：" class="headerlink" title="1.2 DI:Dependency Injection(依赖注入)："></a>1.2 DI:Dependency Injection(依赖注入)：</h3><p>为了实现IoC需要DI的支持，对象的创建(IoC)需要依赖注入。</p>
<p>注入方式：</p>
<ul>
<li>set方法注入</li>
<li>构造函数注入</li>
<li>P命名空间&amp;SpEL注入</li>
</ul>
<p>注入类型：</p>
<ul>
<li>值类型注入:Java简单类型的注入</li>
<li>引用类型注入</li>
</ul>
<hr>
<h2 id="二、BeanFactory-amp-ApplicationContext"><a href="#二、BeanFactory-amp-ApplicationContext" class="headerlink" title="二、BeanFactory&amp;ApplicationContext"></a>二、BeanFactory&amp;ApplicationContext</h2><h3 id="2-1-容器对象："><a href="#2-1-容器对象：" class="headerlink" title="2.1 容器对象："></a>2.1 容器对象：</h3><ul>
<li>BeanFactory:最底层的接口，针对这个接口的实现类功能较为单一。BeanFactory接口实现类的容器，在每次获取对象时才会创建对象。</li>
<li>ApplicationContext:这个接口实现类的容器在容器对象创建时，所有容器中的对象都会被创建，而且功能更为强大。<ul>
<li>ClassXmlPathApplicationContext:ApplicationContext的实现类，从类路径下加载配置文件来创建容器。</li>
<li>FileSystemXmlApplicationContext:ApplicationContext的实现类,从硬盘文件中加载配置文件来创建容器。</li>
</ul>
</li>
</ul>
<p><strong>应用场景：</strong>一般使用ApplicationContext,在资源缺乏的环境下可以使用BeanFactory。</p>
<h3 id="2-2-Spring容器创建对象的三种方式"><a href="#2-2-Spring容器创建对象的三种方式" class="headerlink" title="2.2 Spring容器创建对象的三种方式"></a>2.2 Spring容器创建对象的三种方式</h3><ul>
<li><p>空参构造方法：默认的创建方式</p>
</li>
<li><p>静态工厂方法<br>工厂类：<br><img src="/spring2/userfactory.png" alt="userfactory"></p>
</li>
</ul>
<p>配置：<br><img src="/spring2/factory.png" alt="factory"></p>
<ul>
<li>实例工厂方法<br>工厂类：<br><img src="/spring2/userfactory.png" alt="userfactory"></li>
</ul>
<p>配置<br><img src="/spring2/factory2.png" alt="factory2"></p>
<hr>
<h2 id="三、applicationContext-xml中的bean元素的属性"><a href="#三、applicationContext-xml中的bean元素的属性" class="headerlink" title="三、applicationContext.xml中的bean元素的属性"></a>三、applicationContext.xml中的bean元素的属性</h2><h3 id="3-1-基本属性"><a href="#3-1-基本属性" class="headerlink" title="3.1 基本属性"></a>3.1 基本属性</h3><p><img src="/spring2/bean.png" alt="bean"></p>
<h3 id="3-2-scope属性"><a href="#3-2-scope属性" class="headerlink" title="3.2 scope属性"></a>3.2 scope属性</h3><p>scope属性用来指定创建对象的模式：</p>
<ul>
<li>singleton:默认值，即单例对象，容器对象被创建时即存在。容器中只会存在一个对象实例</li>
<li>prototype:多例原型对象，<strong>每次从容器中获取对象时，对象才会被创建。</strong>而且每次都创建一个新的对象实例</li>
<li>request:对象与Web中request的生命周期一致</li>
<li>session:与Web中session的生命周期一致</li>
</ul>
<h3 id="3-3-生命周期属性"><a href="#3-3-生命周期属性" class="headerlink" title="3.3 生命周期属性"></a>3.3 生命周期属性</h3><p>init-method:指定一个初始化方法，容器会在对象创建时调用<br>destroy-method:指定一个销毁方法，容器会在对象销毁时调用</p>
<h4 id="3-3-1-测试程序"><a href="#3-3-1-测试程序" class="headerlink" title="3.3.1 测试程序"></a>3.3.1 测试程序</h4><h5 id="3-3-1-1-配置文件applicationContext-xml"><a href="#3-3-1-1-配置文件applicationContext-xml" class="headerlink" title="3.3.1.1 配置文件applicationContext.xml"></a>3.3.1.1 配置文件applicationContext.xml</h5><p><img src="/spring2/bean2.png" alt="bean2"></p>
<h5 id="3-3-1-2-User实体类"><a href="#3-3-1-2-User实体类" class="headerlink" title="3.3.1.2 User实体类"></a>3.3.1.2 User实体类</h5><p><img src="/spring2/user2.png" alt="user2"></p>
<h5 id="3-3-1-3-测试方法"><a href="#3-3-1-3-测试方法" class="headerlink" title="3.3.1.3 测试方法"></a>3.3.1.3 测试方法</h5><p><img src="/spring2/demo2.png" alt="demo2"></p>
<h5 id="3-3-1-4-控制台输出"><a href="#3-3-1-4-控制台输出" class="headerlink" title="3.3.1.4 控制台输出"></a>3.3.1.4 控制台输出</h5><p><img src="/spring2/log2.png" alt="log2"></p>
<h3 id="3-4-Spring支持模块化配置"><a href="#3-4-Spring支持模块化配置" class="headerlink" title="3.4 Spring支持模块化配置"></a>3.4 Spring支持模块化配置</h3><p>使用import标签可导入外部配置文件<br><img src="/spring2/resource.png" alt="resource"></p>
<hr>
<h2 id="四、属性注入"><a href="#四、属性注入" class="headerlink" title="四、属性注入"></a>四、属性注入</h2><h3 id="4-1-set方法注入"><a href="#4-1-set方法注入" class="headerlink" title="4.1 set方法注入"></a>4.1 set方法注入</h3><p><em>set方法注入，顾名思义就是通过属性的setter方法给属性赋值。</em></p>
<h4 id="4-1-1-配置文件applicationContext-xml"><a href="#4-1-1-配置文件applicationContext-xml" class="headerlink" title="4.1.1 配置文件applicationContext.xml"></a>4.1.1 配置文件applicationContext.xml</h4><p><img src="/spring2/ac2.png" alt="ac2"></p>
<h4 id="4-1-2-实体类"><a href="#4-1-2-实体类" class="headerlink" title="4.1.2 实体类"></a>4.1.2 实体类</h4><p><strong>User</strong><br><img src="/spring2/user2.png" alt="user2"></p>
<p><strong>Car</strong><br><img src="/spring2/car.png" alt="car"></p>
<h4 id="4-1-3-测试程序"><a href="#4-1-3-测试程序" class="headerlink" title="4.1.3 测试程序"></a>4.1.3 测试程序</h4><p><img src="/spring2/demo3.png" alt="demo3"></p>
<h4 id="4-1-4-控制台输出"><a href="#4-1-4-控制台输出" class="headerlink" title="4.1.4 控制台输出"></a>4.1.4 控制台输出</h4><p><img src="/spring2/log3.png" alt="log3"></p>
<h3 id="4-2-构造函数注入"><a href="#4-2-构造函数注入" class="headerlink" title="4.2 构造函数注入"></a>4.2 构造函数注入</h3><p><em>构造函数注入，即通过构造函数中的参数来给属性赋值。</em></p>
<h4 id="4-2-1-配置文件applicationContext-xml"><a href="#4-2-1-配置文件applicationContext-xml" class="headerlink" title="4.2.1 配置文件applicationContext.xml"></a>4.2.1 配置文件applicationContext.xml</h4><p><img src="/spring2/ac4.png" alt="ac4"></p>
<h4 id="4-2-2-User实体类"><a href="#4-2-2-User实体类" class="headerlink" title="4.2.2 User实体类"></a>4.2.2 User实体类</h4><p><img src="/spring2/user4.png" alt="user4"></p>
<h4 id="4-2-3-测试程序"><a href="#4-2-3-测试程序" class="headerlink" title="4.2.3 测试程序"></a>4.2.3 测试程序</h4><p><img src="/spring2/demo4.png" alt="demo4"></p>
<h4 id="4-2-4-控制台输出"><a href="#4-2-4-控制台输出" class="headerlink" title="4.2.4 控制台输出"></a>4.2.4 控制台输出</h4><p><img src="/spring2/log4.png" alt="log4"></p>
<h3 id="4-3-复杂类型属性的注入"><a href="#4-3-复杂类型属性的注入" class="headerlink" title="4.3 复杂类型属性的注入"></a>4.3 复杂类型属性的注入</h3><p>复杂类型如：</p>
<ul>
<li>Array</li>
<li>List</li>
<li>Map</li>
<li>Properties</li>
</ul>
<h4 id="4-3-1-示例："><a href="#4-3-1-示例：" class="headerlink" title="4.3.1 示例："></a>4.3.1 示例：</h4><h5 id="4-3-1-1-CollectionBean实体类"><a href="#4-3-1-1-CollectionBean实体类" class="headerlink" title="4.3.1.1 CollectionBean实体类"></a>4.3.1.1 CollectionBean实体类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionBean</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Object[] array;<span class="comment">// 数组类型属性的注入</span></div><div class="line">	<span class="keyword">private</span> List list; <span class="comment">// List类型属性的注入</span></div><div class="line">	<span class="keyword">private</span> Map map; <span class="comment">// Map类型属性的注入</span></div><div class="line">	<span class="keyword">private</span> Properties proerties; <span class="comment">// Properties类型属性的注入</span></div><div class="line"></div><div class="line">	<span class="keyword">public</span> Object[] getArray() &#123;</div><div class="line">		<span class="keyword">return</span> array;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArray</span><span class="params">(Object[] array)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.array = array;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> List <span class="title">getList</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> list;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List list)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.list = list;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Map <span class="title">getMap</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> map;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMap</span><span class="params">(Map map)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.map = map;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Properties <span class="title">getProerties</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> proerties;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProerties</span><span class="params">(Properties proerties)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.proerties = proerties;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"CollectionBean [array="</span> + Arrays.toString(array) + <span class="string">", list="</span> + list + <span class="string">", map="</span> + map + <span class="string">", proerties="</span></div><div class="line">				+ proerties + <span class="string">"]"</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="4-3-1-2-配置文件applicationContext-xml"><a href="#4-3-1-2-配置文件applicationContext-xml" class="headerlink" title="4.3.1.2 配置文件applicationContext.xml"></a>4.3.1.2 配置文件applicationContext.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"collectionBean"</span> <span class="attr">class</span>=<span class="string">"jzf.spring.inject.CollectionBean"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 如果数组中只存放一个值，可以直接用value/ref子属性来配置 --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- &lt;property name="array" value="Mike"&gt;&lt;/property&gt; --&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 数组类型注入：</span></div><div class="line">		 array:包含数组的元素</div><div class="line">		 value:数组元素</div><div class="line">		 ref:引用其他类型作为数组的元素</div><div class="line">	 --&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"array"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>Mike<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"user"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- 如果List中只存放一个值，也可以直接用value/ref子属性来配置 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>Rose<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"user"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="comment">&lt;!--Map类型的注入： </span></div><div class="line">		entry:map中的键值对 </div><div class="line">		key:键</div><div class="line">		key-ref:引用其他类型作为键 </div><div class="line">		value:值 </div><div class="line">		value-ref:引用其他类型作为值 --&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">map</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"u"</span> <span class="attr">value-ref</span>=<span class="string">"user"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="comment">&lt;!-- Proerties类型注入</span></div><div class="line">		 props:Proerties中的元素必须包含在其中</div><div class="line">		 key:键</div><div class="line">		 prop:标签体内即为值</div><div class="line">	--&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"proerties"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"driver"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"url"</span>&gt;</span>jdbc:mysql:///test<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、IoC-amp-DI是什么&quot;&gt;&lt;a href=&quot;#一、IoC-amp-DI是什么&quot; class=&quot;headerlink&quot; title=&quot;一、IoC&amp;amp;DI是什么&quot;&gt;&lt;/a&gt;一、IoC&amp;amp;DI是什么&lt;/h2&gt;&lt;h3 id=&quot;1-1-IoC-Inverse-Of-Control-反转控制-：&quot;&gt;&lt;a href=&quot;#1-1-IoC-Inverse-Of-Control-反转控制-：&quot; class=&quot;headerlink&quot; title=&quot;1.1 IoC:Inverse Of Control(反转控制)：&quot;&gt;&lt;/a&gt;1.1 IoC:Inverse Of Control(反转控制)：&lt;/h3&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring(一)：简介与入门程序</title>
    <link href="http://yoursite.com/spring1/"/>
    <id>http://yoursite.com/spring1/</id>
    <published>2017-06-16T14:37:16.000Z</published>
    <updated>2017-06-16T14:38:43.573Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Spring简介"><a href="#一、Spring简介" class="headerlink" title="一、Spring简介"></a>一、Spring简介</h2><h3 id="1-1-什么是Spring"><a href="#1-1-什么是Spring" class="headerlink" title="1.1 什么是Spring"></a>1.1 什么是Spring</h3><p>Spring是一个开源框架，是为简化企业级应用开发而生。Spring是一个IoC(DI)和AOP框架。<br><a id="more"></a><br>Spring为简化Java开发的复杂性，了以下四种关键策略：</p>
<ul>
<li>基于POJO的轻量级和最小侵入性编程</li>
<li>通过依赖注入和面向接口实现松耦合</li>
<li>基于切面和惯例进行声明式编程</li>
<li>通过切面和模板减少样板式代码</li>
</ul>
<p>在Spring4.0中，包括了20个不同的<strong>模块</strong>。</p>
<ul>
<li>Spring核心容器：Spring最核心的部分，管理者bean的创建、配置和管理。Spring bean工厂提供DI的功能，而Spring中的应用上下文是在bean工厂的基础上实现的。</li>
<li>Spring AOP模块:Spring中开发切面的基础。借助于AOP,可以将遍布于系统中的横切关注点从它们应用的对象中解耦出来。</li>
<li>数据访问与集成(ORM模块)</li>
<li>Web与远程调用(Spring MVC)</li>
<li>…</li>
</ul>
<h3 id="1-2-Spring在JavaEE三层架构中的位置"><a href="#1-2-Spring在JavaEE三层架构中的位置" class="headerlink" title="1.2 Spring在JavaEE三层架构中的位置"></a>1.2 Spring在JavaEE三层架构中的位置</h3><p>Spring称为JavaEE一站式框架,因为Spring是一个容器性质的框架，容器中装入什么对象，Spring就具有由该对象带来的功能。<br>Spring内部包含了对其他优秀框架(strut2、mybatis、hibernate)的直接支持。</p>
<h2 id="二、第一个Spring小程序"><a href="#二、第一个Spring小程序" class="headerlink" title="二、第一个Spring小程序"></a>二、第一个Spring小程序</h2><h3 id="2-1开发环境："><a href="#2-1开发环境：" class="headerlink" title="2.1开发环境："></a>2.1开发环境：</h3><p>Eclipse Neon+JDK1.8</p>
<h4 id="2-2-导包：spring核心模块-core-beans-context-SpEL-jar包-日志支持jar包"><a href="#2-2-导包：spring核心模块-core-beans-context-SpEL-jar包-日志支持jar包" class="headerlink" title="2.2 导包：spring核心模块(core+beans+context+SpEL)jar包+日志支持jar包"></a>2.2 导包：spring核心模块(core+beans+context+SpEL)jar包+日志支持jar包</h4><pre><code>spring-beans-4.2.4.RELEASE.jar    
spring-context-4.2.4.RELEASE.jar
spring-core-4.2.4.RELEASE.jar
spring-expression-4.2.4.RELEASE.jar
com.springsource.org.apache.commons.logging-1.1.1.jar
</code></pre><h4 id="2-3-导入beans命名空间"><a href="#2-3-导入beans命名空间" class="headerlink" title="2.3 导入beans命名空间"></a>2.3 导入beans命名空间</h4><h4 id="2-4-工程结构"><a href="#2-4-工程结构" class="headerlink" title="2.4 工程结构:"></a>2.4 工程结构:</h4><p><img src="/spring1/project.png" alt="project"></p>
<h4 id="2-3-User实体类"><a href="#2-3-User实体类" class="headerlink" title="2.3 User实体类"></a>2.3 User实体类</h4><p><img src="/spring1/user.png" alt="user"></p>
<h4 id="2-5-applicationContext-xml"><a href="#2-5-applicationContext-xml" class="headerlink" title="2.5 applicationContext.xml"></a>2.5 applicationContext.xml</h4><p><img src="/spring1/ac.png" alt="ac"></p>
<h4 id="2-6-测试类"><a href="#2-6-测试类" class="headerlink" title="2.6 测试类"></a>2.6 测试类</h4><p><img src="/spring1/demo.png" alt="demo"></p>
<h4 id="2-7-控制台输出"><a href="#2-7-控制台输出" class="headerlink" title="2.7 控制台输出"></a>2.7 控制台输出</h4><p><img src="/spring1/log.png" alt="log"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、Spring简介&quot;&gt;&lt;a href=&quot;#一、Spring简介&quot; class=&quot;headerlink&quot; title=&quot;一、Spring简介&quot;&gt;&lt;/a&gt;一、Spring简介&lt;/h2&gt;&lt;h3 id=&quot;1-1-什么是Spring&quot;&gt;&lt;a href=&quot;#1-1-什么是Spring&quot; class=&quot;headerlink&quot; title=&quot;1.1 什么是Spring&quot;&gt;&lt;/a&gt;1.1 什么是Spring&lt;/h3&gt;&lt;p&gt;Spring是一个开源框架，是为简化企业级应用开发而生。Spring是一个IoC(DI)和AOP框架。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis(四):一级、二级缓存</title>
    <link href="http://yoursite.com/mybatis4/"/>
    <id>http://yoursite.com/mybatis4/</id>
    <published>2017-06-15T09:31:46.000Z</published>
    <updated>2017-06-15T09:49:48.898Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、MyBtis缓存简介"><a href="#一、MyBtis缓存简介" class="headerlink" title="一、MyBtis缓存简介"></a>一、MyBtis缓存简介</h2><p>为什么要用缓存？<br>如果缓存中有所需要的数据，就不用从数据库中获取数据，大大提高了系统性能。<br><a id="more"></a></p>
<h3 id="1-1-MyBtis的一级、二级缓存："><a href="#1-1-MyBtis的一级、二级缓存：" class="headerlink" title="1.1 MyBtis的一级、二级缓存："></a>1.1 MyBtis的一级、二级缓存：</h3><ul>
<li><strong>一级缓存</strong>是sqlsession的缓存<br>sqlsession对象有一个数据结构(hashmap)，用于缓存数据。不同的sqlsession之间的缓存数据区域是互不影响的。</li>
<li><strong>二级缓存</strong>是mapper.xml(映射文件)级别的缓存<br>多个sqlsession去操作同一个mapper.xml的statement(sql语句)，多个sqlsession可以用二级缓存来缓存数据，二级缓存是跨sqlsession的。<br>(二级缓存区域根据mapper的namespace来区分，不同mapper的二级缓存互不影响)</li>
</ul>
<p><strong>区别</strong>：二级缓存比一级缓存的范围大</p>
<hr>
<h2 id="二、MyBtis一级缓存"><a href="#二、MyBtis一级缓存" class="headerlink" title="二、MyBtis一级缓存"></a>二、MyBtis一级缓存</h2><p><strong>MyBtis默认支持一级缓存，不需要进行配置</strong></p>
<h3 id="2-1-会从缓存中取数据的情况"><a href="#2-1-会从缓存中取数据的情况" class="headerlink" title="2.1 会从缓存中取数据的情况"></a>2.1 会从缓存中取数据的情况</h3><p>先查询用户id为1的用户。(会去缓存中查找;若没有,从数据库中查询)<br>再查询用户id为1的用户。(此时缓存中已经存在,则会直接取出数据，不需要从数据库查询，即不需要发出sql语句)</p>
<p><strong>mapper接口</strong><br><img src="/mybatis4/mapper.png" alt="mapper"></p>
<p><strong>UserMapper.xml</strong><br><img src="/mybatis4/mapperxml.png" alt="mapperxml"></p>
<p><strong>测试方法</strong><br><img src="/mybatis4/test.png" alt="test"></p>
<p><strong>输出日志</strong><br><img src="/mybatis4/test11.png" alt="test1"><br>可以看出第一次执行了一条sql语句,而第二次是直接从缓存中取出数据</p>
<h3 id="2-2-不会从缓存中取数据取数据的情况"><a href="#2-2-不会从缓存中取数据取数据的情况" class="headerlink" title="2.2 不会从缓存中取数据取数据的情况"></a>2.2 不会从缓存中取数据取数据的情况</h3><p>先查询用户id为1的用户。<br>执行修改、删除、更新用户的sql语句即包含commit的操作。<br>再查询用户id为1的用户。(这时，为了避免脏读，不会从缓存中取数据而是从数据库中查询)</p>
<p><strong>测试方法</strong><br><img src="/mybatis4/test2.png" alt="test2"></p>
<p><strong>输出日志</strong><br><img src="/mybatis4/test21.png" alt="test21"><br>可以看到第三次查询没有从缓存中直接取出数据，而是从数据库中查询</p>
<h2 id="三、MyBtis二级缓存"><a href="#三、MyBtis二级缓存" class="headerlink" title="三、MyBtis二级缓存"></a>三、MyBtis二级缓存</h2><h3 id="3-1首先要开启MyBtis的二级缓存"><a href="#3-1首先要开启MyBtis的二级缓存" class="headerlink" title="3.1首先要开启MyBtis的二级缓存"></a>3.1首先要开启MyBtis的二级缓存</h3><ol>
<li><p>在全局配置文件中开启二级缓存<br><code>&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</code></p>
</li>
<li><p>还需在mapper.xml(映射文件)中开启二级缓存<br>添加一行<code>&lt;cache/&gt;</code></p>
</li>
</ol>
<h3 id="3-2-例1-会从二级缓存中取数据的情况："><a href="#3-2-例1-会从二级缓存中取数据的情况：" class="headerlink" title="3.2 例1 会从二级缓存中取数据的情况："></a>3.2 例1 会从二级缓存中取数据的情况：</h3><p>sqlsession1先查询用户id为1的用户。(会去缓存中查找;若没有,从数据库中查询)<br>sqlsession2再查询用户id为1的用户。(会直接缓存中查找数据)</p>
<p><strong>测试方法</strong><br><img src="/mybatis4/test3.png" alt="test3"></p>
<p><strong>输出日志</strong><br><img src="/mybatis4/test31.png" alt="test31"><br>可以看出sqlsession2执行时并没有发出sql语句，而是直接从二级缓存区域中取出数据</p>
<h3 id="3-3-例2不会从二级缓存中取数据的情况"><a href="#3-3-例2不会从二级缓存中取数据的情况" class="headerlink" title="3.3 例2不会从二级缓存中取数据的情况:"></a>3.3 例2不会从二级缓存中取数据的情况:</h3><p>sqlsession1先查询用户id为1的用户。(会去二级缓存中查找;若没有,从数据库中查询)<br>sqlSession3查询用户id为1的用户，再更新用户的信息<br>sqlsession2再查询用户id为1的用户。(会从数据库中查询)</p>
<p><strong>测试方法</strong><br><img src="/mybatis4/test4.png" alt="test4"></p>
<p><strong>输出日志</strong><br><img src="/mybatis4/test41.png" alt="test41"></p>
<h3 id="3-3-与二级缓存有关的属性"><a href="#3-3-与二级缓存有关的属性" class="headerlink" title="3.3 与二级缓存有关的属性"></a>3.3 与二级缓存有关的属性</h3><p>禁用二级缓存<br><code>&lt;select id=&quot;findUserById&quot; parameterType=&quot;int&quot; resultType=&quot;User&quot; useCache=&quot;false&quot;&gt;</code></p>
<p>设置<strong>select</strong>元素的<strong>usecache</strong>属性为true，将会导致本条语句的结果被二级缓存，默认值：对<strong>select</strong>元素为true。</p>
<p>刷新二级缓存(清空缓存)<br><code>&lt;update id=&quot;updateUser&quot; parameterType=&quot;User&quot; flushCache=&quot;true&quot;&gt;</code><br>设置<strong>update、insert、delete</strong>元素的<strong>flushcache</strong>属性为 true，任何时候只要语句被调用，都会导致本地缓存和二级缓存都会被清空。<br>对于<strong>update、insert、delete</strong>元素默认值：true。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、MyBtis缓存简介&quot;&gt;&lt;a href=&quot;#一、MyBtis缓存简介&quot; class=&quot;headerlink&quot; title=&quot;一、MyBtis缓存简介&quot;&gt;&lt;/a&gt;一、MyBtis缓存简介&lt;/h2&gt;&lt;p&gt;为什么要用缓存？&lt;br&gt;如果缓存中有所需要的数据，就不用从数据库中获取数据，大大提高了系统性能。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis(三):全局配置文件与映射文件</title>
    <link href="http://yoursite.com/mybatis3/"/>
    <id>http://yoursite.com/mybatis3/</id>
    <published>2017-06-14T11:54:09.000Z</published>
    <updated>2017-06-15T08:34:48.285Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、全局配置文件"><a href="#一、全局配置文件" class="headerlink" title="一、全局配置文件"></a>一、全局配置文件</h2><p>所有标签如下</p>
<ul>
<li>properties（属性）</li>
<li>settings（全局配置参数）<a id="more"></a></li>
<li>typeAliases（类型别名）</li>
<li>typeHandlers（类型处理器）</li>
<li>objectFactory（对象工厂）</li>
<li>plugins（插件）</li>
<li>environments（环境集合属性对象）<ul>
<li>environment（环境子属性对象）<ul>
<li>transactionManager（事务管理）</li>
<li>dataSource（数据源）</li>
</ul>
</li>
</ul>
</li>
<li>mappers（映射器）</li>
</ul>
<h3 id="1-1-properties"><a href="#1-1-properties" class="headerlink" title="1.1 properties"></a>1.1 properties</h3><h4 id="1-1-1加载外部属性文件"><a href="#1-1-1加载外部属性文件" class="headerlink" title="1.1.1加载外部属性文件:"></a>1.1.1加载外部属性文件:</h4><p><img src="/mybatis3/properties.jpg" alt="properties"></p>
<p>mysql.properties:<br><img src="/mybatis3/mysql.jpg" alt="mysql"></p>
<p>其中的属性就可以在整个配置文件中使用来替换需要动态配置的属性值,如:<br><img src="/mybatis3/datasource.jpg" alt="dataSource"></p>
<h4 id="1-1-2-properties-元素的子元素来传递"><a href="#1-1-2-properties-元素的子元素来传递" class="headerlink" title="1.1.2 properties 元素的子元素来传递:"></a>1.1.2 properties 元素的子元素来传递:</h4><p><img src="/mybatis3/properties2.jpg" alt="properties2"></p>
<h3 id="1-2-settings-全局参数配置。MyBatis-中极为重要的调整设置，它们会改变-MyBatis-的运行时行为。"><a href="#1-2-settings-全局参数配置。MyBatis-中极为重要的调整设置，它们会改变-MyBatis-的运行时行为。" class="headerlink" title="1.2 settings:全局参数配置。MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。"></a>1.2 settings:全局参数配置。MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。</h3><p><strong>常用</strong>的参数有：</p>
<ul>
<li>cacheEnabled            该配置影响的所有映射器中配置的缓存的全局开关。默认为true。</li>
<li>lazyLoadingEnabled    延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 </li>
<li>aggressiveLazyLoading 当开启时，任何方法的调用都会加载该对象的所有属性。否则，每个属性会按需加载。</li>
</ul>
<p>其他参数设置见mybatis官方文档：<a href="http://www.mybatis.org/mybatis-3/zh/configuration.html#settings" target="_blank" rel="external">http://www.mybatis.org/mybatis-3/zh/configuration.html#settings</a></p>
<h3 id="1-3-typeAliases-类型别名。"><a href="#1-3-typeAliases-类型别名。" class="headerlink" title="1.3 typeAliases:类型别名。"></a>1.3 typeAliases:类型别名。</h3><p>在mapper.xml中，定义很多的statement，statement需要parameterType指定输入参数的类型、需要resultType指定输出结果的映射类型。<br>如果在指定类型时输入类型全路径，不方便进行开发，可以针对parameterType或resultType指定的类型定义一些别名，在mapper.xml中通过别名定义，方便开发。</p>
<h4 id="1-3-1-MyBatis默认支持的常用Java类型别名："><a href="#1-3-1-MyBatis默认支持的常用Java类型别名：" class="headerlink" title="1.3.1 MyBatis默认支持的常用Java类型别名："></a>1.3.1 MyBatis默认支持的常用Java类型别名：</h4><p>见官方文档：<a href="http://www.mybatis.org/mybatis-3/zh/configuration.html#typeAliases" target="_blank" rel="external">http://www.mybatis.org/mybatis-3/zh/configuration.html#typeAliases</a></p>
<h4 id="1-3-2-自定义别名："><a href="#1-3-2-自定义别名：" class="headerlink" title="1.3.2 自定义别名："></a>1.3.2 自定义别名：</h4><p>定义:<br><img src="/mybatis3/typealias.jpg" alt="typealias"></p>
<p>使用：<br><img src="/mybatis3/typealias4.jpg" alt="typealias4"></p>
<h4 id="1-3-3-批量定义别名-推荐使用-："><a href="#1-3-3-批量定义别名-推荐使用-：" class="headerlink" title="1.3.3 批量定义别名(推荐使用)："></a>1.3.3 批量定义别名(推荐使用)：</h4><p>如：<br><img src="/mybatis3/typealias3.jpg" alt="typealias3"></p>
<h3 id="1-4-mappers-用来加载映射文件"><a href="#1-4-mappers-用来加载映射文件" class="headerlink" title="1.4 mappers:用来加载映射文件"></a>1.4 mappers:用来加载映射文件</h3><h4 id="1-4-1-加载单个映射文件："><a href="#1-4-1-加载单个映射文件：" class="headerlink" title="1.4.1 加载单个映射文件："></a>1.4.1 加载单个映射文件：</h4><p><img src="/mybatis3/mappers.jpg" alt="mappers"></p>
<h4 id="1-4-2-批量加载映射文件："><a href="#1-4-2-批量加载映射文件：" class="headerlink" title="1.4.2 批量加载映射文件："></a>1.4.2 批量加载映射文件：</h4><p><img src="/mybatis3/mappers2.jpg" alt="mappers2"></p>
<h2 id="二、映射文件中的输入与输出映射"><a href="#二、映射文件中的输入与输出映射" class="headerlink" title="二、映射文件中的输入与输出映射"></a>二、映射文件中的输入与输出映射</h2><p><em>MyBatis强大的地方就在于它的映射文件(包含statement即sql语句)，通过灵活地使用mapper.xml映射文件，可以使代码更加简洁，功能却更加强大。</em></p>
<p>映射文件有一些顶级元素，用来映射statement或者进行其他设置：</p>
<ul>
<li>insert:映射插入语句</li>
<li>select:映射查询语句</li>
<li>update:映射更新语句</li>
<li>delete:映射删除语句</li>
<li>cache:缓存配置</li>
<li>cache-ref:其他命名空间缓存配置的引用</li>
<li>resultMap:是最复杂也是最强大的元素，用来描述如何从数据库结果集中来加载对象</li>
<li>sql:定义可重用sql语句块</li>
</ul>
<h3 id="2-1输入映射："><a href="#2-1输入映射：" class="headerlink" title="2.1输入映射："></a>2.1输入映射：</h3><p>使用insert、select、update、delete等定义sql语句都需要输入参数parameterType，parameterType可以是简单类型、HashMap、POJO或者POJO的包装类型。</p>
<h4 id="2-1-1输入参数类型为简单类型："><a href="#2-1-1输入参数类型为简单类型：" class="headerlink" title="2.1.1输入参数类型为简单类型："></a>2.1.1输入参数类型为简单类型：</h4><p><img src="/mybatis3/parameterType.jpg" alt="parameterType"></p>
<h4 id="2-1-2输入参数类型为POJO"><a href="#2-1-2输入参数类型为POJO" class="headerlink" title="2.1.2输入参数类型为POJO:"></a>2.1.2输入参数类型为POJO:</h4><p><img src="/mybatis3/parameterType2.jpg" alt="parameterType2"></p>
<h4 id="2-1-3输入参数类型为POJO的包装类型"><a href="#2-1-3输入参数类型为POJO的包装类型" class="headerlink" title="2.1.3输入参数类型为POJO的包装类型:"></a>2.1.3输入参数类型为POJO的包装类型:</h4><p>当查询条件很复杂时，原有的POJO不能满足要求，可以对POJO进行包装</p>
<h5 id="2-1-3-1-UserWrapper-User的包装类型"><a href="#2-1-3-1-UserWrapper-User的包装类型" class="headerlink" title="2.1.3.1 UserWrapper(User的包装类型)"></a>2.1.3.1 UserWrapper(User的包装类型)</h5><p><img src="/mybatis3/userwrapper.jpg" alt="userwrapper"></p>
<h5 id="2-1-3-2-User"><a href="#2-1-3-2-User" class="headerlink" title="2.1.3.2 User"></a>2.1.3.2 User</h5><p><img src="/mybatis3/user.jpg" alt="user"></p>
<h5 id="2-1-3-3-UserWrapperMapper-mapper接口"><a href="#2-1-3-3-UserWrapperMapper-mapper接口" class="headerlink" title="2.1.3.3 UserWrapperMapper(mapper接口)"></a>2.1.3.3 UserWrapperMapper(mapper接口)</h5><p><img src="/mybatis3/userwrappermapper.jpg" alt="userwrappermapper"></p>
<h5 id="2-1-3-4-UserWrapperMapper-xml-映射文件"><a href="#2-1-3-4-UserWrapperMapper-xml-映射文件" class="headerlink" title="2.1.3.4 UserWrapperMapper.xml(映射文件)"></a>2.1.3.4 UserWrapperMapper.xml(映射文件)</h5><p><img src="/mybatis3/userwrappermapperxml.jpg" alt="userwrappermapperxml"></p>
<h5 id="2-1-3-5-测试程序"><a href="#2-1-3-5-测试程序" class="headerlink" title="2.1.3.5 测试程序"></a>2.1.3.5 测试程序</h5><p><img src="/mybatis3/userwrappermappertest.jpg" alt="userwrappermappertest"></p>
<h3 id="2-2输出映射："><a href="#2-2输出映射：" class="headerlink" title="2.2输出映射："></a>2.2输出映射：</h3><p>输出参数可以用resltType和resultMap来表示。<br>resultType可以是简单类型、POJO类型。<br><strong>注意：</strong><br>使用resultType进行输出映射，只有查询出来的列名和pojo中的属性名一致，该列才可以映射成功。<br>如果查询出来的列名和pojo中的属性名全部不一致，没有创建pojo对象。<br>只要查询出来的列名和pojo中的属性有一个一致，就会创建pojo对象。</p>
<p>输出参数为简单类型和POJO类型的操作和输入映射做法一样。但当输入为POJO对象列表(List)时，输出参数类型即resultType仍为列表中元素类型(POJO)。</p>
<h4 id="2-2-1-输出为POJO列表"><a href="#2-2-1-输出为POJO列表" class="headerlink" title="2.2.1 输出为POJO列表"></a>2.2.1 输出为POJO列表</h4><h5 id="2-2-1-1-UserMapper-java-mapper接口"><a href="#2-2-1-1-UserMapper-java-mapper接口" class="headerlink" title="2.2.1.1 UserMapper.java(mapper接口)"></a>2.2.1.1 UserMapper.java(mapper接口)</h5><p><img src="/mybatis3/usermapper.jpg" alt="usermapper"></p>
<h5 id="2-2-1-2-UserMapper-xml映射文件"><a href="#2-2-1-2-UserMapper-xml映射文件" class="headerlink" title="2.2.1.2 UserMapper.xml映射文件"></a>2.2.1.2 UserMapper.xml映射文件</h5><p><img src="/mybatis3/usermapperxml.jpg" alt="usermapperxml"></p>
<h5 id="2-2-1-3-测试程序"><a href="#2-2-1-3-测试程序" class="headerlink" title="2.2.1.3 测试程序"></a>2.2.1.3 测试程序</h5><p><img src="/mybatis3/findusers.jpg" alt="findusers"></p>
<h4 id="2-2-2-resultMap的使用"><a href="#2-2-2-resultMap的使用" class="headerlink" title="2.2.2 resultMap的使用"></a>2.2.2 resultMap的使用</h4><p><strong>当查询得到的列名与POJO的属性名不一致时，可以使用resultMap将列名映射为POJO属性名</strong></p>
<h5 id="2-2-2-1-UserMapper-java-mapper接口"><a href="#2-2-2-1-UserMapper-java-mapper接口" class="headerlink" title="2.2.2.1 UserMapper.java(mapper接口)"></a>2.2.2.1 UserMapper.java(mapper接口)</h5><p><img src="/mybatis3/usermapper3.jpg" alt="usermapper3"></p>
<h5 id="2-2-2-2-UserMapper-xml映射文件"><a href="#2-2-2-2-UserMapper-xml映射文件" class="headerlink" title="2.2.2.2 UserMapper.xml映射文件"></a>2.2.2.2 UserMapper.xml映射文件</h5><p><img src="/mybatis3/usermapperxml2.jpg" alt="usermapperxml2"></p>
<h5 id="2-2-2-3-测试程序"><a href="#2-2-2-3-测试程序" class="headerlink" title="2.2.2.3 测试程序"></a>2.2.2.3 测试程序</h5><p><img src="/mybatis3/test.jpg" alt="test"></p>
<h2 id="三、动态SQL语句"><a href="#三、动态SQL语句" class="headerlink" title="三、动态SQL语句"></a>三、动态SQL语句</h2><p>MyBatis 的强大特性之一便是它的动态 SQL。利用动态 SQL 这一特性可以实现更简洁的代码却有着更加强大的功能。</p>
<ul>
<li>if</li>
<li>choose(when otherwise)</li>
<li>trim(where set)</li>
<li>foreach</li>
</ul>
<h3 id="3-1-if的使用"><a href="#3-1-if的使用" class="headerlink" title="3.1 if的使用"></a>3.1 if的使用</h3><p><img src="/mybatis3/if.png" alt="if"></p>
<h3 id="3-2-choose的使用"><a href="#3-2-choose的使用" class="headerlink" title="3.2 choose的使用"></a>3.2 choose的使用</h3><p><img src="/mybatis3/choose.png" alt="choose"></p>
<h3 id="3-3-可重用的sql片段"><a href="#3-3-可重用的sql片段" class="headerlink" title="3.3 可重用的sql片段"></a>3.3 可重用的sql片段</h3><p>可以将上面的choose语句部分定义为可重用的sql片段<br><img src="/mybatis3/sql.png" alt="sql"></p>
<p>使用include元素可以通过id来引用sql片段(若sql片段不在该命名空间内，还需加上命名空间名)<br><img src="/mybatis3/sql2.png" alt="sql2"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、全局配置文件&quot;&gt;&lt;a href=&quot;#一、全局配置文件&quot; class=&quot;headerlink&quot; title=&quot;一、全局配置文件&quot;&gt;&lt;/a&gt;一、全局配置文件&lt;/h2&gt;&lt;p&gt;所有标签如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;properties（属性）&lt;/li&gt;
&lt;li&gt;settings（全局配置参数）&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis(二)：使用mapper代理方法进行增删改查操作</title>
    <link href="http://yoursite.com/mybatis2/"/>
    <id>http://yoursite.com/mybatis2/</id>
    <published>2017-06-14T09:53:19.000Z</published>
    <updated>2017-06-17T09:49:06.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、原始的DAO开发方法"><a href="#一、原始的DAO开发方法" class="headerlink" title="一、原始的DAO开发方法"></a>一、原始的DAO开发方法</h2><p>原始的DAO开发方法需要程序员自行开发DAO接口和DAO的实现类，存在不少弊端 :</p>
<ol>
<li>DAO接口实现类方法中存在大量模板方法，设想能否将这些代码提取出来，大大减轻程序员的工作量。<a id="more"></a></li>
<li>调用sqlsession方法时将statement的id硬编码了,不利于系统维护</li>
<li>调用sqlsession方法时传入的变量，由于sqlsession方法使用泛型，即使变量类型传入错误，在编译阶段也不报错，不利于程序员开发。</li>
</ol>
<hr>
<h2 id="二、使用mapper代理的方法开发DAO"><a href="#二、使用mapper代理的方法开发DAO" class="headerlink" title="二、使用mapper代理的方法开发DAO"></a>二、使用mapper代理的方法开发DAO</h2><p>mapper代理方法思路：<br>程序员只需开发mapper接口(相对于DAO接口)，而具体的实现类则由MyBatis通过与mapper接口对应的映射文件(mapper.xml)来生成<strong>代理对象</strong>，则可以通过这个代理对象来与数据库实现交互。</p>
<h3 id="2-1-mapper代理方法需要遵循的规范"><a href="#2-1-mapper代理方法需要遵循的规范" class="headerlink" title="2.1 mapper代理方法需要遵循的规范"></a>2.1 mapper代理方法需要遵循的规范</h3><ol>
<li>mapper.xml中的命名空间(namespace)需要和mapper接口的地址一致</li>
<li>mapper.xml中的statement(sql语句)的id需要和mapper接口中对应的方法名一致</li>
<li>mapper.xml中的statement的parameterType和mapper接口中对应方法的输入参数类型一致</li>
<li>mapper.xml中的statement的resultType和mapper接口中对应方法的返回值类型一致(若接口方法返回的是List类型，则resultType应是List中元素的类型)</li>
</ol>
<h3 id="2-2实例"><a href="#2-2实例" class="headerlink" title="2.2实例"></a>2.2实例</h3><h4 id="2-2-1-准备工作"><a href="#2-2-1-准备工作" class="headerlink" title="2.2.1 准备工作"></a>2.2.1 准备工作</h4><ol>
<li><p>开发环境<br>JDK1.8+Eclipse Neon+MySQL</p>
</li>
<li><p>工程结构<br><img src="/mybatis2/project2.jpg" alt="project"></p>
</li>
</ol>
<p>相关jar包：</p>
<ul>
<li>log4j-1.2.17</li>
<li>mybatis-3.4.4</li>
<li>mysql-connector-java-5.1.18-bin</li>
</ul>
<hr>
<h4 id="2-2-2-全局配置文件-mybatis-config-xml"><a href="#2-2-2-全局配置文件-mybatis-config-xml" class="headerlink" title="2.2.2 全局配置文件 mybatis-config.xml"></a>2.2.2 全局配置文件 mybatis-config.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">	&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line">	<span class="meta">&lt;!DOCTYPE configuration</span></div><div class="line">	  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</div><div class="line">	  "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 外部属性文件 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"config/mysql.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 数据源及事务管理 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span> /&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span> /&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span> /&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span> /&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">environments</span>&gt;</span></div><div class="line">		<span class="comment">&lt;!-- 映射文件注册 --&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">mappers</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"config/mapper/UserMapper.xml"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">```	</div><div class="line">-----</div><div class="line"></div><div class="line"></div><div class="line">#### 2.2.3 UserMapper接口</div><div class="line">```java</div><div class="line">	package com.jzf.mybatis.mapper;</div><div class="line"></div><div class="line">	import com.jzf.mybatis.domain.User;</div><div class="line"></div><div class="line">	public interface UserMapper &#123;</div><div class="line">		</div><div class="line">		public User findUserById(int id);</div><div class="line">		</div><div class="line">		public void insertUser(User user);</div><div class="line">		</div><div class="line">		public void updateUser(User user);</div><div class="line">		</div><div class="line">		public void deleteUserById(int id);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<hr>
<h4 id="2-2-4-UserMapper-xml映射文件"><a href="#2-2-4-UserMapper-xml映射文件" class="headerlink" title="2.2.4 UserMapper.xml映射文件"></a>2.2.4 UserMapper.xml映射文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper</span></div><div class="line">  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</div><div class="line">  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</div><div class="line"><span class="comment">&lt;!-- namespace --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.jzf.mybatis.mapper.UserMapper"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- </span></div><div class="line">		select语句 id:唯一表示一条sql语句 </div><div class="line">		parameterType:输入参数类型</div><div class="line">		resultType:输出类型</div><div class="line">		#&#123;&#125;:输入参数占位符 </div><div class="line">	--&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.jzf.mybatis.domain.User"</span>&gt;</span></div><div class="line">		select * from user where id=#&#123;id&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--</span></div><div class="line">		 插入语句</div><div class="line">		useGeneratedKeys:仅对 insert和 update有用,</div><div class="line">		设置为true,会令 MyBatis使用 JDBC的 getGeneratedKeys 方法来取出由数据库内部生成的主键</div><div class="line">	--&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.jzf.mybatis.domain.User"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></div><div class="line">		insert into user(name,password) value(#&#123;name&#125;,#&#123;password&#125;)</div><div class="line">	<span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--</span></div><div class="line">		 更新语句</div><div class="line">	--&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"com.jzf.mybatis.domain.User"</span>&gt;</span></div><div class="line">		update user set name=#&#123;name&#125;,password=#&#123;password&#125; where id=#&#123;id&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">update</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--</span></div><div class="line">		 删除语句</div><div class="line">	--&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></div><div class="line">		delete from user where id=#&#123;id&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">delete</span>&gt;</span>	</div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<h4 id="2-2-5-测试程序"><a href="#2-2-5-测试程序" class="headerlink" title="2.2.5 测试程序"></a>2.2.5 测试程序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.jzf.mybatis.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</div><div class="line"><span class="keyword">import</span> org.junit.Before;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.jzf.mybatis.domain.User;</div><div class="line"><span class="keyword">import</span> com.jzf.mybatis.mapper.UserMapper;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest2</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</div><div class="line"></div><div class="line">	<span class="meta">@Before</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		String resource = <span class="string">"config/mybatis-config.xml"</span>;</div><div class="line">		InputStream inputStream = Resources.getResourceAsStream(resource);</div><div class="line">		<span class="comment">// 读取配置文件并创建会话工厂</span></div><div class="line">		sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindUserById</span><span class="params">()</span> </span>&#123;</div><div class="line">		SqlSession sqlSession = <span class="keyword">null</span>;</div><div class="line">		User user = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			sqlSession = sqlSessionFactory.openSession();</div><div class="line">			<span class="comment">// 获得MyBatis自动生成的代理对象</span></div><div class="line">			UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</div><div class="line">			<span class="comment">// 通过代理对象执行响应的方法</span></div><div class="line">			user = userMapper.findUserById(<span class="number">1</span>);</div><div class="line">			System.out.println(user);</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			sqlSession.close();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsertUser</span><span class="params">()</span> </span>&#123;</div><div class="line">		SqlSession sqlSession = <span class="keyword">null</span>;</div><div class="line">		User user = <span class="keyword">new</span> User(<span class="string">"王二麻子"</span>, <span class="string">"333333"</span>);</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			sqlSession = sqlSessionFactory.openSession();</div><div class="line">			<span class="comment">// 获得MyBatis自动生成的代理对象</span></div><div class="line">			UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</div><div class="line">			<span class="comment">// 通过代理对象执行响应的方法</span></div><div class="line">			userMapper.insertUser(user);</div><div class="line">			<span class="comment">// 执行除了查询以外的操作必须提交</span></div><div class="line">			sqlSession.commit();</div><div class="line">			<span class="comment">//查看是否已获得自增主键</span></div><div class="line">			System.out.println(user);</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			sqlSession.close();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateUser</span><span class="params">()</span> </span>&#123;</div><div class="line">		SqlSession sqlSession = <span class="keyword">null</span>;</div><div class="line">		User user = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			sqlSession = sqlSessionFactory.openSession();</div><div class="line">			<span class="comment">// 获得MyBatis自动生成的代理对象</span></div><div class="line">			UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</div><div class="line">			<span class="comment">//获取用户</span></div><div class="line">			user = userMapper.findUserById(<span class="number">1</span>);</div><div class="line">			<span class="comment">//更新用户</span></div><div class="line">			user.setName(<span class="string">"小张三"</span>);</div><div class="line">			userMapper.updateUser(user);</div><div class="line">			sqlSession.commit();</div><div class="line">			<span class="comment">//再次获取用户</span></div><div class="line">			user = userMapper.findUserById(<span class="number">1</span>);</div><div class="line">			System.out.println(user);</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			sqlSession.close();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteUser</span><span class="params">()</span> </span>&#123;</div><div class="line">		SqlSession sqlSession = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			sqlSession = sqlSessionFactory.openSession();</div><div class="line">			<span class="comment">// 获得MyBatis自动生成的代理对象</span></div><div class="line">			UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</div><div class="line">			<span class="comment">// 通过代理对象执行响应的方法</span></div><div class="line">			userMapper.deleteUserById(<span class="number">9</span>);</div><div class="line">			sqlSession.commit();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			sqlSession.close();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、原始的DAO开发方法&quot;&gt;&lt;a href=&quot;#一、原始的DAO开发方法&quot; class=&quot;headerlink&quot; title=&quot;一、原始的DAO开发方法&quot;&gt;&lt;/a&gt;一、原始的DAO开发方法&lt;/h2&gt;&lt;p&gt;原始的DAO开发方法需要程序员自行开发DAO接口和DAO的实现类，存在不少弊端 :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;DAO接口实现类方法中存在大量模板方法，设想能否将这些代码提取出来，大大减轻程序员的工作量。&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis(一)：简介及入门程序</title>
    <link href="http://yoursite.com/mybatis1/"/>
    <id>http://yoursite.com/mybatis1/</id>
    <published>2017-06-14T08:14:07.000Z</published>
    <updated>2017-06-17T09:44:33.158Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Mybatis简介"><a href="#一、Mybatis简介" class="headerlink" title="一、Mybatis简介"></a>一、Mybatis简介</h2><p><em>MyBatis是支持普通 SQL查询，存储过程和高级映射的优秀持久层框架。</em><br><em>，消除了几乎所有的JDBC代码和参数的手工设置以及结果集的检索。</em><br><a id="more"></a><br><em>MyBatis使用简单的 XML或注解用于配置和原始映射，将接口和 Java 的POJOs（Plain Old Java Objects，普通的 Java对象）映射成数据库中的记录。</em></p>
<p>传统JDBC存在的弊端：</p>
<ol>
<li>数据库连接频繁开启和关闭，造成数据库资源浪费。</li>
<li>将sql语句硬编码，不利于系统维护。</li>
<li>使用PreparedStatement来设置输入参数，使用硬编码，不利于系统维护。</li>
<li>从结果集中取数据时存在硬编码，不利于系统维护。</li>
</ol>
<p>而Mybatis提供了对输入参数的自动映射，和将结果集自动映射为POJO(输出映射)，可扩展性好，利于维护。</p>
<hr>
<h2 id="二、Mybatis框架基本结构"><a href="#二、Mybatis框架基本结构" class="headerlink" title="二、Mybatis框架基本结构"></a>二、Mybatis框架基本结构</h2><h3 id="2-1-配置文件与API"><a href="#2-1-配置文件与API" class="headerlink" title="2.1 配置文件与API"></a>2.1 配置文件与API</h3><ol>
<li>mybatis-config.xml(名称不固定):全局配置文件,配置关于数据源、事务管理、映射文件注册等设置</li>
<li>Xxx.xml:映射文件，配置具体的sql语句。若是使用mapper代理开发，则映射文件名需和mapper节口名一致</li>
<li>SqlSessionFactoryBuilder:会话过程构造器，用来读取配置文件并配置会话工厂</li>
<li>SqlSessionFactory:会话工厂，用来创建会话</li>
<li>SqlSession:会话，面向程序员，用来实现增、删、改、查等与数据库交互的操作</li>
</ol>
<h3 id="2-2-作用域与声明周期"><a href="#2-2-作用域与声明周期" class="headerlink" title="2.2 作用域与声明周期"></a>2.2 作用域与声明周期</h3><ol>
<li>SqlSessionFactoryBuilder:作用域为方法作用域。可作为一个工具使用，创建了SqlSessionFactory后就不在需要它了。</li>
<li>SqlSessionFactory:作用域为应用作用域。SqlSessionFactory一旦被创建就应该在应用的运行期间一直存在，没有任何理由对它进行清除或重建。</li>
<li>SqlSession:作用域为请求或方法作用域。每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的。<br>标准模式：<br> SqlSession session = sqlSessionFactory.openSession();<br> try {<br>   // do work<br> } finally {<br>   session.close();<br> }</li>
<li>Mapper Instances(映射器实例):映射器是用来绑定statement(sql语句)接口。作用域是方法作用域。<br>标准模式： <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">  SqlSession session = sqlSessionFactory.openSession();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  BlogMapper mapper = session.getMapper(BlogMapper.class);</div><div class="line">  <span class="comment">// do work</span></div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">  session.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h2 id="三、第一个Mybatis小程序"><a href="#三、第一个Mybatis小程序" class="headerlink" title="三、第一个Mybatis小程序"></a>三、第一个Mybatis小程序</h2><h3 id="3-1准备工作："><a href="#3-1准备工作：" class="headerlink" title="3.1准备工作："></a>3.1准备工作：</h3><ol>
<li><p>开发环境<br>JDK1.8+Eclipse Neon+MySQL</p>
</li>
<li><p>工程结构<br><img src="/mybatis1/project.jpg" alt="project"></p>
</li>
</ol>
<p>相关jar包：</p>
<ul>
<li>log4j-1.2.17</li>
<li>mybatis-3.4.4</li>
<li>mysql-connector-java-5.1.18-bin</li>
</ul>
<h3 id="3-2-log4j日志文件"><a href="#3-2-log4j日志文件" class="headerlink" title="3.2  log4j日志文件"></a>3.2  log4j日志文件</h3><p><img src="/mybatis1/log4j.jpg" alt="log4j"></p>
<h3 id="3-3-全局配置文件mybatis-config-xml"><a href="#3-3-全局配置文件mybatis-config-xml" class="headerlink" title="3.3  全局配置文件mybatis-config.xml"></a>3.3  全局配置文件mybatis-config.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE configuration</span></div><div class="line">  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</div><div class="line">  "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 外部属性文件 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"config/mysql.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 数据源及事务管理 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span> /&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span> /&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span> /&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">environments</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- 映射文件注册 --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">mappers</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"config/mapper/UserMapper.xml"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="3-4-映射文件"><a href="#3-4-映射文件" class="headerlink" title="3.4  映射文件"></a>3.4  映射文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper</span></div><div class="line">  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</div><div class="line">  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</div><div class="line">  </div><div class="line"><span class="comment">&lt;!-- namespace 唯一标识映射文件--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"userMapper"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!-- </span></div><div class="line">		select语句 id:唯一表示一条sql语句 </div><div class="line">		parameterType:输入参数类型</div><div class="line">		resultType:输出类型</div><div class="line">		#&#123;&#125;:输入参数占位符 </div><div class="line">	--&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.jzf.mybatis.domain.User"</span>&gt;</span></div><div class="line">		select * from user where id=#&#123;id&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="3-5-测试程序"><a href="#3-5-测试程序" class="headerlink" title="3.5  测试程序"></a>3.5  测试程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.jzf.mybatis.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.jzf.mybatis.domain.User;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">		String resource = <span class="string">"config/mybatis-config.xml"</span>;</div><div class="line">		InputStream inputStream = Resources.getResourceAsStream(resource);</div><div class="line">		<span class="comment">//读取配置文件并创建会话工厂</span></div><div class="line">		SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</div><div class="line">		SqlSession sqlSession = <span class="keyword">null</span>;</div><div class="line">		</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//创建会话</span></div><div class="line">			sqlSession = sqlSessionFactory.openSession();</div><div class="line">			String statement = <span class="string">"userMapper.findUserById"</span>;</div><div class="line">			<span class="comment">//通过会话执行具体sql语句</span></div><div class="line">			User user = sqlSession.selectOne(statement, <span class="number">1</span>);</div><div class="line">			System.out.println(user);</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">		    <span class="comment">//及时关闭会话</span></div><div class="line">			sqlSession.close();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-6-输出"><a href="#3-6-输出" class="headerlink" title="3.6 输出"></a>3.6 输出</h3><p><img src="/mybatis1/out.jpg" alt="out"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、Mybatis简介&quot;&gt;&lt;a href=&quot;#一、Mybatis简介&quot; class=&quot;headerlink&quot; title=&quot;一、Mybatis简介&quot;&gt;&lt;/a&gt;一、Mybatis简介&lt;/h2&gt;&lt;p&gt;&lt;em&gt;MyBatis是支持普通 SQL查询，存储过程和高级映射的优秀持久层框架。&lt;/em&gt;&lt;br&gt;&lt;em&gt;，消除了几乎所有的JDBC代码和参数的手工设置以及结果集的检索。&lt;/em&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="MyBatis" scheme="http://yoursite.com/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>AJAX与jQuery</title>
    <link href="http://yoursite.com/AjaxAndjQuery/"/>
    <id>http://yoursite.com/AjaxAndjQuery/</id>
    <published>2017-05-27T16:00:00.000Z</published>
    <updated>2017-05-27T16:31:19.820Z</updated>
    
    <content type="html"><![CDATA[<p><strong>AJAX在jQuery中的应用</strong><br><em>jQuery对AJAX进行了封装，提供了如$.ajax(),load(),$.get(),$.post()等方法来进行异步请求</em><br><a id="more"></a><br><strong>一、方法简介</strong></p>
<ul>
<li>load(url,{data},callback);以get/post的方式请求载入Html文件<ul>
<li>url 请求的Html文件地址</li>
<li>{data} 请求参数键值对(作为参数附加在url后)</li>
<li>callback 回调函数,有3个参数：<ul>
<li>responseText 服务器返回的Html</li>
<li>textStatus   服务器返回的状态码</li>
<li>XMLHttpRequest XMLHttpRequest对象，可以从中获得statuc,responseText</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>$.get(url,{data},callback,type);通过远程Http get请求方式载入数据</p>
<ul>
<li>url 请求的文件地址</li>
<li>{data} 请求的参数键值对</li>
<li>type  服务器返回的响应数据的格式，可以是html,xml,json,script,text,_default</li>
<li>callback 回调函数(与load方法不同，只在请求成功后调用),有两个参数：<ul>
<li>data 服务器返回的响应数据</li>
<li>textStatus 服务器返回的状态码</li>
</ul>
</li>
</ul>
</li>
<li><p>$.post();与$.get();方法用法一致</p>
</li>
<li><p>$.getScript(url,callback);请求载入JavaScript脚本文件</p>
<ul>
<li>url 请求的js文件地址</li>
<li>ccallback 载入成功时回调函数</li>
</ul>
</li>
<li><p>$.getJSON();请求载入JSON格式的文件</p>
<ul>
<li>url 发送请求地址</li>
<li>data 待发送键值对参数</li>
<li>callback 载入成功时回调函数</li>
</ul>
</li>
<li><p>$.ajax(url,[settings]);jQuery底层ajax实现。除了url参数，常用的还有：</p>
<ul>
<li>data 发送到服务器的请求参数,可以是字符串，也可以是数组</li>
<li>contentType 设置编码类型</li>
<li>dataType 预期服务器返回的数据格式</li>
<li>success 请求成功时的回调函数，传入参数：<ul>
<li>data 服务器返回的响应数据</li>
<li>textStatus 服务器返回的状态码</li>
</ul>
</li>
<li>error 请求失败时的回调函数，传入参数:<ul>
<li>XMLHttpRequest</li>
<li>textStatus 服务器返回的状态码</li>
<li>errorThrown 捕获的异常信息</li>
</ul>
</li>
<li>complete 请求完成时调用，无论请求失败还是成功。传入参数：<ul>
<li>XMLHttpRequest</li>
<li>textStatus 服务器返回的状态码</li>
</ul>
</li>
<li>timeout 请求超时的时间</li>
</ul>
</li>
<li><p>解决中文乱码</p>
<ul>
<li>前端(javascript)两次编码：encodeURI(encodeURI(data));</li>
<li>后台两次解码：URLDecode.decode(URLDecode.decode(data));</li>
</ul>
</li>
</ul>
<hr>
<p><strong>二、示例</strong></p>
<p><strong>load()方法</strong></p>
<pre><code>$(document).ready(function() {
        /*发送get请求 */
        $(&quot;#loadGet&quot;).click(function() {
            $(&quot;#content&quot;).load(&quot;/Ajax/LoadServlet&quot;); 
        });

        /*发送post 请求 */
        $(&quot;#loadPost&quot;).click(function() {
            $(&quot;#content&quot;).load(&quot;/Ajax/LoadServlet&quot;, {
                &quot;name&quot; : &quot;jzf&quot;,
                &quot;age&quot; : 23
            }, function(responseText,textStatus,XMLHttpRequest) {
                alert(XMLHttpRequest.status);
            });
        });
    });
</code></pre><p><strong>$.get方法()</strong><br>js部分</p>
<pre><code>$(document).ready(function(){
        $(&quot;#button1&quot;).click(function(){
            var name = $(&quot;#text1&quot;).val();
            var age = $(&quot;#text2&quot;).val();
            $.get(&quot;/Ajax/GetServlet&quot;,
                 {&quot;name&quot;:encodeURI(encodeURI(name)),&quot;age&quot;:age},
                 function(data,textStatus) {
                    $(&quot;#div4&quot;).html(data);
                    alert(data);
            });
        });
    });
</code></pre><p>html部分</p>
<pre><code> &lt;div id=&quot;div1&quot;&gt;
    &lt;h3 id=&quot;h&quot;&gt;请输入你的信息&lt;/h3&gt;
    &lt;div&gt;
        &lt;div id=&quot;div2&quot;&gt;
        &lt;span&gt;姓名：&lt;/span&gt;
        &lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;text1&quot;&gt;&lt;br/&gt;
        &lt;/div&gt;
        &lt;div id=&quot;div3&quot;&gt;
        &lt;span&gt;年龄：&lt;/span&gt;
        &lt;input type=&quot;text&quot; name=&quot;age&quot; id=&quot;text2&quot;&gt;&lt;br/&gt;
        &lt;/div&gt;
        &lt;input type=&quot;button&quot; id=&quot;button1&quot; value=&quot;提交&quot;&gt;
    &lt;/div&gt;
    &lt;div id=&quot;div4&quot;&gt;

    &lt;/div&gt;
&lt;/div&gt;
</code></pre><p><strong>$.ajax()方法</strong></p>
<pre><code>$(document).ready(function(){
    $(&quot;#ajax&quot;).click(function(){
        $.ajax({
            url:&quot;/Ajax/AjaxServlet&quot;,
            type:&quot;post&quot;,
            /*data:&quot;name=jiazhengfeng&amp;method=post&quot;,*/
            data:{
                &quot;name&quot;:&quot;jiazhengfeng&quot;,
                &quot;method&quot;:&quot;bypost&quot;
            },
            success:function(data,textStatus) {
                $(&quot;#div2&quot;).html(data);
                alert(&quot;success: &quot;+textStatus);
            },
             error:function(textStatus) {
                alert(&quot;error: &quot;+textStatus);
            },
            complete:function(XMLHttpRequest) {
                alert(&quot;complete: &quot;+XMLHttpRequest.status);
            } 
        });
    });
})；
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;AJAX在jQuery中的应用&lt;/strong&gt;&lt;br&gt;&lt;em&gt;jQuery对AJAX进行了封装，提供了如$.ajax(),load(),$.get(),$.post()等方法来进行异步请求&lt;/em&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="AJAX" scheme="http://yoursite.com/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>AJAX入门(一)</title>
    <link href="http://yoursite.com/AJAX/"/>
    <id>http://yoursite.com/AJAX/</id>
    <published>2017-05-26T16:00:00.000Z</published>
    <updated>2017-05-27T01:22:57.074Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一、什么是AJAX?</strong><br>AJAX是<em>Asynchronous JavaScript And Xml</em>(异步的JavaScript和Xml)的缩写。<br><a id="more"></a><br>AJAX不是新的编程语言，而是一种使用现有标准的新方法，最大的<strong>优点</strong>是在<em>不加载整个页面的情况下，与服务器交换部分数据并更新部分网页。</em></p>
<p><strong>异步:使用异步的方式，JavaScript无需等待服务器的响应，而是：</strong></p>
<ol>
<li>在等待响应时执行其他脚本</li>
<li>响应就绪后对响应进行处理</li>
</ol>
<hr>
<p><strong>二、创建XMLHttpRequest对象</strong><br>XMLHttpRequest对象是AJAX的基础，所有现代浏览器都支持XMLHttpRequest对象(IE5和IE6支持ActiveXObject)。<br>XMLHttpRequest对象用于和服务器进行数据交换，以实现在不重载整个页面的情况下更新部分网页。<br>创建XMLHttpRequest对象的语法如下：</p>
<pre><code>var xmlHttp;
if(window.XMLHttpRequest){//如果是支持XMLHttpRequest对象的浏览器
    xmlHttp = new XMLHttpRequest();
}else{//如果是IE5和IE6
    xmlHttp = new ActiveXObject(&quot;MicroSoft.XMLHTTP&quot;);
}
</code></pre><hr>
<p><strong>三、XMLHttpRequest对象的重要属性</strong></p>
<ul>
<li>onreadystatechange  回调函数，每当XMLHttpRequest对象的readystate属性改变时，就会调用该函数。</li>
<li>readyState        存储XMLHttpRequest对象状态的属性，共有5种状态：<ul>
<li>0:请求未初始化</li>
<li>1:与服务器建立连接</li>
<li>2:请求已接收</li>
<li>3:请求处理中</li>
<li>4:请求已完成，且响应已就绪        </li>
</ul>
</li>
<li>status           服务器返回的状态码，常用的有：<ul>
<li>200:ok</li>
<li>302:请求被重定向</li>
<li>404:未找到页面</li>
<li>500:服务器错误   </li>
</ul>
</li>
</ul>
<hr>
<p><strong>四、XMLHttpRequest发送请求</strong><br>使用XMLHttpRequest对象发送请求需要用到XMLHttpRequest对象的open和send方法。</p>
<ul>
<li>open(method,url,async);设置请求的方法、url和是否异步<ul>
<li>method:请求的方法</li>
<li>url:请求的文件在服务器上的地址</li>
<li>async:请求是异步还是同步的。true:异步，false:异步</li>
</ul>
</li>
<li>send(string);发送请求<ul>
<li>string:如果请求类型是post，可以通过string参数模拟表单</li>
<li>setRequestHeader(name,value):如果是post请求，可以使用setRequestHeader方法来设置请求头<ul>
<li>name:请求头名称</li>
<li>value:请求头值</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p><strong>五、XMLHttpRequest获得响应数据</strong><br>使用XMLHttpRequest对象的responseText属性和responseXML属性来获得响应数据</p>
<ul>
<li>responseText  获得字符串形式的响应数据</li>
<li>responseXML  获得XML格式的响应数据</li>
</ul>
<p><strong>六、AJAX与服务器进行交互的实例</strong></p>
<p>1.客户端javascript代码</p>
<pre><code>function getQueryString() {
    var queryString = &quot;&quot;;
    var name = document.getElementById(&quot;text1&quot;).value;
    var age = document.getElementById(&quot;text2&quot;).value;
    queryString = &quot;name=&quot;+name+&quot;&amp;&quot;+&quot;age=&quot;+age
    return queryString;
} 

function loadDoc() {
    var txt = getQueryString();

      var xhttp;
    if (window.XMLHttpRequest) {
        xhttp = new XMLHttpRequest();
    }else{
        xhttp = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);
    }

      xhttp.onreadystatechange = function() {
           if (this.readyState == 4 &amp;&amp; this.status == 200) {
                document.getElementById(&quot;div4&quot;).innerHTML = xhttp.responseText;
        }
      };

      /*
      get方式
       xhttp.open(&quot;GET&quot;, &quot;server.jsp?&quot;+txt, true);
       xhttp.send();
       */

       /*post方式*/
       xhttp.open(&quot;post&quot;,&quot;server.jsp&quot;,true);
    xhttp.setRequestHeader(&quot;content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);
    xhttp.send(txt);

}
</code></pre><p>2.服务器端jsp</p>
<pre><code>&lt;% 
    String name = request.getParameter(&quot;name&quot;);
    String age = request.getParameter(&quot;age&quot;);
    out.print(&quot;name=&quot;+name+&quot;,age=&quot;+age);//返回给客户端的数据

%&gt;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;一、什么是AJAX?&lt;/strong&gt;&lt;br&gt;AJAX是&lt;em&gt;Asynchronous JavaScript And Xml&lt;/em&gt;(异步的JavaScript和Xml)的缩写。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="AJAX" scheme="http://yoursite.com/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>jQuery入门(一)</title>
    <link href="http://yoursite.com/jQuery/"/>
    <id>http://yoursite.com/jQuery/</id>
    <published>2017-05-25T16:00:00.000Z</published>
    <updated>2017-05-27T01:22:09.190Z</updated>
    
    <content type="html"><![CDATA[<p>菜鸟教程jQuery教程学习笔记<a href="http://www.runoob.com/jquery/jquery-tutorial.html" target="_blank" rel="external">http://www.runoob.com/jquery/jquery-tutorial.html</a></p>
<p><strong>一、jQuery是一个轻量级的javascript函数库。</strong><br><a id="more"></a><br>jQuery可以实现HTML元素访问、操作、CSS操作、HTML事件函数等功能。</p>
<hr>
<p><strong>二、jQuery语法</strong><br>基础语法：${selector}.action()</p>
<ul>
<li>‘$’定义jQuery</li>
<li>‘selector’选择器用来选取HTML元素</li>
<li>‘action()’代表对HTML元素执行的操作</li>
</ul>
<hr>
<p><strong>三、jQuery选择器</strong><br>jQuery选择器基于元素的id、类、类型、属性、属性值等来选取HTML元素，它基于CSS选择器。除此之外还有一些自定义的选择器。</p>
<ul>
<li>元素选择器<br><code>${&quot;p&quot;}</code> 选取元素标签名为p的元素</li>
<li>id选择器<br><code>${&quot;#id_name&quot;}</code> 选取id为id_name的元素</li>
<li>类选择器<br><code>${&quot;.class_name&quot;}</code> 选取class=”class_name”的元素</li>
<li>属性选择器<br><code>${&quot;[attribute_name]&quot;}</code>  选取带有属性名为attribute_name的属性的元素</li>
</ul>
<hr>
<p><strong>四、jQuery事件</strong><br>DOM事件</p>
<ul>
<li>鼠标事件:click,dbclick,mouseenter,mouseleave</li>
<li>键盘事件:keydown,keyup,kepress</li>
<li>表单事件:submit,change,blur,fouse</li>
<li>文档/窗口事件:load,unload,scroll,resize</li>
</ul>
<p>在jQuery中，大多数DOM事件都有一个等效的jQuery方法。如：</p>
<ul>
<li><code>$(document).ready();</code> 文档加载完成后执行</li>
<li><code>$(&quot;p&quot;).click();</code>     p元素被点击时触发</li>
<li><code>$(&quot;#test&quot;).foucs();</code> id为test的元素获得焦点时执行</li>
<li>…</li>
</ul>
<hr>
<p><strong>五、jQuery效果</strong></p>
<ul>
<li><p>显示/隐藏，可以使用hide(),show()方法来隐藏式显示HTML元素。<br>hide(speed,callback); 可选参数speed控制隐藏的速度，可以是slow/fast/毫秒值；可选参数callback是隐藏后执行的函数名称。<br>对于show()方法，同理。还可以使用toggle()方法来切换显示/隐藏,<br>如果元素已经显示，则会被隐藏;否则会被显示。callback回调函数会在动画效果完成后才执行。</p>
</li>
<li><p>淡入淡出</p>
<ul>
<li>fadeIn()  使元素淡入</li>
<li>fadeOut() 使元素淡出</li>
<li>fadeToggle() 若元素已淡入，则会添加淡出效果;否则执行淡入效果</li>
<li>fadeTo()  使元素渐变为给定的不透明度。fadeTo(speed,opacity,callback);<br>必需参数opacity来设置元素的不透明度,值为0~1之间。</li>
</ul>
</li>
<li><p>滑动</p>
<ul>
<li>slideDown() 使元素下滑</li>
<li>slideUp()   使元素上滑</li>
<li>slideToggle() 切换元素的上滑/下滑</li>
</ul>
</li>
<li><p>动画<br>animate();方法可以自定义元素的动画效果。<br>语法：<code>$(selector).animate({params},speed,callback);</code><br>{params}定义元素的CSS属性，如width,border等。<br>并且自定义动画支持队列功能。<br>注意：要记得首先把元素的position属性设置为relative、fixed或absolute。</p>
</li>
<li><p>停止效果<br><code>stop(stopAll,goToEnd);</code>方法可以停止元素的动画效果。</p>
<ul>
<li>stopAll默认为false，仅停止元素的当前动画效果，队列可以继续向后执行;<br>为true时则停止元素的所有动画效果</li>
<li>goToEnd规定是否立即完成当前动画，默认为false。</li>
</ul>
</li>
</ul>
<p><strong>jQuery链(Chaining)技术允许在元素上执行多条jQuery命令(方法)。如：</strong><br><code>$(&quot;p&quot;).slideDown(&quot;slow&quot;).fadeOut(&quot;slow&quot;).slideUp(&quot;slow&quot;);</code></p>
<hr>
<p><strong>六、jQuery操作DOM</strong><br>jQuery提供了一系列操作DOM方法，使得访问和操作HTML元素变得十分容易。</p>
<ul>
<li><p>获得元素内容或属性值</p>
<ul>
<li>html() 获得元素的内容(包括其中嵌套的HTML标记的内容)</li>
<li>text() 获得元素文本内容</li>
<li>val()  获得元素的输入字段的值</li>
<li>attr(“attr_name”) 获得元素的属性名为”attr_name”的属性的值</li>
</ul>
</li>
<li><p>设置元素内容或属性值</p>
<ul>
<li>通过html(),text(),val()方法设置元素新的html内容，文本内容和输入字段的值。</li>
<li>通过attr()方法设置元素的属性的值。如：<code>$(&quot;#id&quot;).attr(&quot;value&quot;,&quot;newValue&quot;);</code><br>attr()方法还可以同时给多个属性赋值。如：<code>$(#id).attr(&quot;attr1&quot;:&quot;value1&quot;,&quot;attr2&quot;:&quot;value2&quot;);</code></li>
<li>上述四种方法都支持通过回调函数来设置元素新的内容或属性值。如：<br><code>$(&quot;#id&quot;).attr(&quot;value&quot;,function(i,origValue){return origValue+&quot;newValue&quot;;});</code></li>
</ul>
</li>
<li><p>添加元素</p>
<ul>
<li>append()/append(elementName) 在元素末尾添加内容或者新元素</li>
<li>prepend()/prepend(elementName) 在元素开头添加内容或者新元素</li>
<li>after()/after(elementName)  在某个元素之后添加内容或者新元素</li>
<li>befor()/before(elementName) 在某个元素之前添加内容或者新元素</li>
</ul>
</li>
<li><p>删除元素</p>
<ul>
<li>remove() 删除选中的元素及其子元素。也可以通过接受一个参数(符合jQuery选择器的语法)<br>进行有选择的删除。如：<code>$(&quot;p&quot;).remove(&quot;#id2&quot;);</code> 删除id=2的p元素。</li>
<li>empty()  删除选中元素的子元素</li>
</ul>
</li>
</ul>
<hr>
<p><strong>七、jQuery操作CSS</strong></p>
<ul>
<li>addClass() 向元素添加类</li>
<li>removeClass() 移除元素的类</li>
<li>toggleClass() 对元素的类执行移除/添加的切换操作</li>
<li>css() 获得CSS属性的值或者设置CSS属性的值。也可以对多个CSS属性进行赋值。如：<br><code>$(&quot;p&quot;).css(&quot;background-color&quot;:&quot;red&quot;,&quot;font-size&quot;:&quot;20px&quot;);</code></li>
</ul>
<p><strong>jQuery与尺寸有关的方法</strong></p>
<ul>
<li>width() 元素的宽度(只包括content)</li>
<li>height() 元素的高度(包括content）</li>
<li>innerWidth() 元素的宽度(包括content和padding)</li>
<li>innerHeight() 元素的高度(包括content和padding)</li>
<li>outerWidth()  元素的宽度(包括content和padding和边框)</li>
<li>outerHeight() 元素的高度(包括content和padding和边框)</li>
</ul>
<hr>
<p><strong>八、jQuery遍历DOM</strong></p>
<ul>
<li><p>向上遍历</p>
<ul>
<li>parent() 返回元素的直接父元素(即只向上遍历一级)</li>
<li>parents() 返回元素的所有祖先。这个方法还可以接收一个参数，来进行筛选。如：<br><code>$(&quot;p&quot;).parents(&quot;div&quot;);</code>返回p元素所有祖先，并且是div元素。</li>
<li>parentsUntil() 返回两个元素之间的父元素。如：<code>$(&quot;span&quot;).parentUntil(&quot;div&quot;);</code>返回<br>span元素到div元素之间的所有span元素的父元素。</li>
</ul>
</li>
<li><p>向下遍历</p>
<ul>
<li>children() 返回元素的所有直接子元素(即只向下遍历一级)</li>
<li>find()  返回元素的所有子元素(遍历直到最后一代)。该方法必须接受一个参数，可以是”*”,即选取所有<br>子元素;也可以是符合CSS选择器语法的参数。如：<code>$(&quot;div&quot;).find(&quot;p&quot;);</code>返回div的所有子元素，且必须是p元素。</li>
</ul>
</li>
<li><p>水平遍历(遍历兄弟元素)</p>
<ul>
<li>siblings() 返回元素的所有兄弟元素。</li>
<li>next() 返回元素的下一个兄弟元素。</li>
<li>nextAll() 返回该元素下面的所有兄弟元素。(沿着兄弟元素遍历)</li>
<li>nextUntil 返回该元素到另一个元素之间的所有兄弟元素。如：<br><code>$(&quot;h1&quot;).nextUntil(&quot;h4&quot;);</code>返回h1元素到h4元素之间所有的h1元素的兄弟元素。</li>
<li>pre(),preAll(),preUntil() 与上述有关next的方法同样，只不过是沿着兄弟元素向上遍历。</li>
</ul>
</li>
<li><p>过滤，即缩小遍历元素的范围。</p>
<ul>
<li>first()返回第一个被选元素的第一个元素。如：<code>$(&quot;div p&quot;).first();</code>选取第一个div元素内的第一个p元素。   </li>
<li>last()l  返回最后一个被选元素的最后一个元素。如:<code>&quot;$(div</code><br><code>p).last();&quot;</code>选取最后一个div元素内的最后一个p元素。</li>
<li>eq() 返回索引号为指定值的元素,索引从0开始。如：<code>$(&quot;li&quot;).eq(&quot;1&quot;);</code> 选取第二个li元素</li>
<li>filter() 返回满足一定标准的元素。如：<code>$(&quot;p&quot;).(&quot;#first&quot;);</code> 返回id=first的p元素。</li>
<li>not() 返回不满足一定标准的元素。如：<code>$(&quot;p&quot;).not(&quot;.test&quot;);</code> 返回所有class!=test的p元素。</li>
</ul>
</li>
</ul>
<hr>
<p><strong>八、总结：jQuery主要是用来选取元素，并对元素进行操作的函数库。核心思想：选取元素，对其操作。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;菜鸟教程jQuery教程学习笔记&lt;a href=&quot;http://www.runoob.com/jquery/jquery-tutorial.html&quot;&gt;http://www.runoob.com/jquery/jquery-tutorial.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、jQuery是一个轻量级的javascript函数库。&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>CSS学习笔记(二)</title>
    <link href="http://yoursite.com/div+css/"/>
    <id>http://yoursite.com/div+css/</id>
    <published>2017-05-21T16:00:00.000Z</published>
    <updated>2017-05-22T12:10:26.388Z</updated>
    
    <content type="html"><![CDATA[<p>网易云课堂前端视频学习笔记之CSS  <a href="http://study.163.com/course/courseMain.htm?courseId=1002905013" target="_blank" rel="external">http://study.163.com/course/courseMain.htm?courseId=1002905013</a></p>
<p><strong>一、盒子模型</strong><br>把页面中的块级元素（行级元素可以通过设置display属性值为block而成为块级元素）都可以看成一个盒子，占据着一定的页面空间，这些元素占据的空间往往比单纯的内容要大，换句话说，我们可以调整盒子的边框和距离的参数来调节盒子的位置。</p>
<p><strong>盒子的组成:</strong>content(内容)、padding(填充)、border(边框)、margin(边界)。<br>一个盒子的宽度/高度是等于content+padding+border+margin，对于任何一个盒子，都可以设定四条边的padding、margin。<br><a id="more"></a><br><strong>border子属性:</strong>color、width、style<br><strong>padding:</strong>用于控制content与border之间的距离<br><strong>margin:</strong>值得是元素与元素之间的距离</p>
<p>行级元素(没有使用display属性的)之间的距离是两者的margin之和<br>块级元素之间的距离(垂直距离)是两者的margin值的最大者</p>
<p>当margin设置为负数时，会使得对应的块/行反向移动，甚至覆盖在另外的块上<br>当块之间是父子关系时，margin设置为负数，可以使得字块从父块中分离出来</p>
<p><strong>二、元素定位</strong><br>各个元素都必须有自己的位置，才能搭建出整个页面的结构。主要通过float、clear、position、z-index属性来实现元素的定位。</p>
<p><strong>float:</strong>属性float可以设置为left,right,none,当设置元素向左或者向右浮动时，元素会向其父元素的左侧或者右侧靠近。</p>
<p>当元素启用float属性，对于父元素而言，它不再属于父元素，原先在父元素中的位置会被下面的子元素所占据，并且子元素的内容围绕着它。大小只是content+padding所占据的空间。</p>
<p><strong>clear:</strong>设置块元素的clear属性来清除浮动的影响，可以取值left,right,both</p>
<p><strong>position:</strong>属性position可以指定板块的位置。即块相对于父块的位置(relative)，绝对位置(absolute)。</p>
<p>当position取值为absolute时，是指它相对body的位置，可以设置left,top等属性来指定具体的位置(此时子块已不再属于父块,如果下面有子块，则子块会完全占据它原来的位置)</p>
<p>当position取值为relative时，是指它相对父块的位置，这时设置left,top等是指它距原来的位置的距离。</p>
<p><strong>z-index:</strong>用于调整定位时重叠块的上下位置，当块设置了position属性时，该值便可设置各块之间的重叠高低关系。默认值为0(z-index属性值越大，在垂直于页面的位置就越往外)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网易云课堂前端视频学习笔记之CSS  &lt;a href=&quot;http://study.163.com/course/courseMain.htm?courseId=1002905013&quot;&gt;http://study.163.com/course/courseMain.htm?courseId=1002905013&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、盒子模型&lt;/strong&gt;&lt;br&gt;把页面中的块级元素（行级元素可以通过设置display属性值为block而成为块级元素）都可以看成一个盒子，占据着一定的页面空间，这些元素占据的空间往往比单纯的内容要大，换句话说，我们可以调整盒子的边框和距离的参数来调节盒子的位置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;盒子的组成:&lt;/strong&gt;content(内容)、padding(填充)、border(边框)、margin(边界)。&lt;br&gt;一个盒子的宽度/高度是等于content+padding+border+margin，对于任何一个盒子，都可以设定四条边的padding、margin。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS学习笔记(一)</title>
    <link href="http://yoursite.com/css1/"/>
    <id>http://yoursite.com/css1/</id>
    <published>2017-05-20T16:00:00.000Z</published>
    <updated>2017-05-21T15:25:11.155Z</updated>
    
    <content type="html"><![CDATA[<p>网易云课堂前端视频学习笔记之CSS  <a href="http://study.163.com/course/courseMain.htm?courseId=1002905013" target="_blank" rel="external">http://study.163.com/course/courseMain.htm?courseId=1002905013</a></p>
<p><strong>一、什么是CSS?</strong><br>CSS(Cascading Style Sheet)即层叠样式表。<br>它是一种专门描述结构文档的表现方式的文档，主要用于网页风格的设计，包括字体大小、颜色、以及元素的精确定位等。<br><a id="more"></a><br>在传统的web网页设计里，使用CSS能让单调的HTML网页更富表现力。</p>
<hr>
<p><strong>二、与传统HTML描述数据方式相比的优势</strong></p>
<ul>
<li>表达效果丰富</li>
<li>文档体积更小</li>
<li>便于信息检索</li>
<li>可读性好</li>
</ul>
<hr>
<p><strong>三、CSS发展历程</strong><br>CSS1.0:1996年12月–&gt;CSS2.0:1998年5月–&gt;CSS2.1:2004年2月–&gt;CSS3.0:2010年</p>
<hr>
<p><strong>四、CSS基本使用</strong><br><strong>1.引入方式</strong></p>
<ul>
<li>内联样式</li>
<li>内部样式</li>
<li>引入(链接)外部样式文件</li>
<li>导入外部样式文件</li>
</ul>
<p><strong>内联样式</strong>将样式内联到具体的HTML元上，常用于精确控制一个HTML元素的表现。直接使用HTML元素的style属性来控制表现形式</p>
<p><strong>内部样式</strong>在HTML文档头部定义样式表，每批样式只控制一份HTML文档。将样式写在<code>&lt;head&gt;</code>标签内，用<code>&lt;style&gt;</code>标签进行声明</p>
<p><strong>引入(链接)外部样式文件</strong><br>将样式表文件与HTML文档彻底分离，需要额外引入样式文件，一份样式表可控制多分HTML文档。使用频率最高，让结构与表现分离。<br>语法<code>&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;外部样式文件&quot;&gt;</code></p>
<p><strong>导入外部样式文件</strong>，与连接外部样式文件类似，只是使用@import来引入外部样式表文件</p>
<p><strong>各种引入方式的优先级</strong><br>可以同时使用以上四种引入样式的方式，当四种方式有相同属性时：<br>优先级顺序 内部&gt;内联&gt;导入&gt;引入</p>
<hr>
<p><strong>2.CSS选择器</strong></p>
<p><strong>定义CSS选择器语法：</strong><br>    <code>selector{
        property:value;
        property2:value2;
    }</code></p>
<p>selector(选择器)：选择器决定该样式对哪些元素起作用<br>属性键值对：决定该样式有什么样的效果</p>
<p><strong>常用CSS选择器</strong></p>
<p><strong>标记选择器(元素选择器)</strong><br><code>Element{
    ...
}/*E代表有效的HTML元素*/</code></p>
<p><strong>类选择器(元素可以有多个classValue,并且效果会叠加)</strong><br><code>Element.classValue{
    ...
}/*Element代表有效的HTML元素*/</code></p>
<p><strong>ID选择器(元素同时使用多个id，不会生效)</strong><br><code>Element#idValue{
    ...
}/*Element代表有效的HTML元素*/</code></p>
<p><strong>选择器组合</strong><br><code>selector1,selector2,selector3...{
    ...
}/*其中selctor为有效的选择器*/</code></p>
<p><strong>选择器嵌套</strong><br><code>selector1 selector2{
    ...
}/*其中selctor为有效的选择器*/</code></p>
<hr>
<p><strong>3.常用样式属性设置</strong><br>CSS字体和文本相关属性</p>
<p><strong>字体相关属性与值</strong><br>font-family        设置文本的字体系列<br>font-size         设置文本的字体大小,绝对大小px，相对大小em,%<br>font-style         设置文本的字体样式，主要有normal/italic/oblique<br>font-weight      设置字体的粗细</p>
<p><strong>文本相关属性与值</strong><br>color           设置文本颜色<br>letter-spacing     设置文本字符间距(字母之间的距离)<br>word-spacing     设置文本单词的间距<br>line-height     设置文本行高<br>text-align      设置文本对齐方式,只有left,right,center<br>text-decoration 设置文本的下划线/上划线/删除线<br>text-indent      设置文本块的首行缩进<br>text-transform     设置文本的大小写，主要有uppercase,lowercase,capitalize</p>
<p><strong>边框和背景</strong><br>边框和背景主要对块级标签使用，要想对行级标签使用，可以通过设置行级标签的display属性为block;同样地可以将块级标签的display属性设置为inline来使用行级标签的相关属性。</p>
<p><strong>边框相关属性</strong><br>border             设置边框的颜色、宽度、样式<br>border-left     设置左边框的颜色、宽度、样式<br>border-right     设置右边框的颜色、宽度、样式<br>border-left     设置左边框的颜色、宽度、样式<br>border-bottom     设置下边框的颜色、宽度、样式<br>border-top         设置上边框的颜色、宽度、样式<br>border-width    设置边框的宽度<br>border-style    设置边框的样式，主要有dotted,solid,doule,dashed<br>border-color     设置边框的颜色</p>
<p>除了border属性可以将各个子属性写在一起，background,font,margin,padding等也可以</p>
<p><strong>背景图片相关属性</strong><br>background                 设置背景图片相关属性<br>background-color:         设置背景图片颜色<br>background-attachment   设置背景图片是否随着滚动条滚动，只有fixed,scroll<br>background-image         设置背景图片 url：背景图片地址,none：无<br>background-position     设置背景图片位置(依次是距左、上边距离)<br>background-repeat         设置背景图片是否平铺，主要有repeat,repeat-x,repeat-y,no-repeat</p>
<p><strong>列表(有序、无序、定义列表)和表格相关属性</strong><br><strong>列表相关属性</strong><br>list-style<br>list-style-image         将图片设置为列表项标记<br>list-style-postion      outside,inside<br>list-style-type          列表项标记符号类型，与list-style-image不可同时使用</p>
<p><strong>表格相关属性</strong><br>border                     设置表格(若选择器是对表格，则是表格边框的设置)的所有边框颜色、宽度、样式<br>border-collapse         设置是否把表格边框合并为单一的边框,collapse<br>border-spacing          设置分割单元格边框的距离,与border-collapse一起使用不会生效<br>caption-side              设置表格标题的位置left,bottom,right<br>empty-cells              设置是否显示表格中空单元格,hidden</p>
<p><strong>常用伪类别属性</strong><br>CSS对<code>&lt;a&gt;</code>标签提供了相关可以实现动态效果的CSS伪类别属性</p>
<p><code>a:link</code>         超链接的普通样式<br><code>a:visited</code>     被点击过的超链接的样式<br><code>a:hover</code>鼠标经过超链接时的样式<br><code>a:active</code>     单击超链接时的样式</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网易云课堂前端视频学习笔记之CSS  &lt;a href=&quot;http://study.163.com/course/courseMain.htm?courseId=1002905013&quot;&gt;http://study.163.com/course/courseMain.htm?courseId=1002905013&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、什么是CSS?&lt;/strong&gt;&lt;br&gt;CSS(Cascading Style Sheet)即层叠样式表。&lt;br&gt;它是一种专门描述结构文档的表现方式的文档，主要用于网页风格的设计，包括字体大小、颜色、以及元素的精确定位等。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Html学习笔记</title>
    <link href="http://yoursite.com/html/"/>
    <id>http://yoursite.com/html/</id>
    <published>2017-05-19T16:00:00.000Z</published>
    <updated>2017-05-21T15:21:00.953Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一、html基本结构</strong><br><code>&lt;html&gt;</code>  网页的所有内容都包含在内<br><code>&lt;hrad&gt;</code>  网页的标题<br><code>&lt;body&gt;</code> 网页的主体<br><a id="more"></a></p>
<hr>
<p><strong>二、head标签</strong><br>    <code>&lt;title&gt;</code>   定义页面标题，即浏览器窗口栏的内容。(为页面的中心内容)<br>    <code>&lt;script&gt;</code> 包含javascript脚本<br>    <code>&lt;link&gt;</code>     链接外部css样式<br>    <code>&lt;style&gt;</code>   定义内部css样式<br>    <code>&lt;meta&gt;</code>     定义页面元信息，也就是一些键值对，主要有以下三个属性<br>                     http-equiv 定义元信息的名称,该属性指定的名称有特殊的意义，它可以向浏览器传回一些有用的信息，帮助浏览器正确地处理网页内容<br>                 name  指定元信息的名称，该名称值可以任意指定(常用的有author/keyword/description)<br>                 content 指定元信息的值</p>
<hr>
<p><strong>三、html常用块/行级标签</strong><br><em>常用块级标签</em><br>    显示为块状，浏览器会在其前后显示折行。常用的块级标签元素包括p,h1~h6,div,ui等<br>    <code>&lt;h1&gt;~&lt;h6&gt;</code>    标题标签<br>    <code>&lt;hr/&gt;</code>    水平线标签<br>    <code>&lt;p&gt;</code>        段落标签<br>    <code>&lt;ol&gt;</code>    有序列表标签<br>    <code>&lt;ul&gt;</code>    无序列表标签<br>    <code>&lt;dl&gt;</code>    定义描述标签<br>    <code>&lt;dt&gt;</code>   定义描述的项目<br>    <code>&lt;dd&gt;</code>        定义具体描述<br>    <code>&lt;div&gt;</code>    分区标签(网页整体布局，即当容器来使用)</p>
<p><em>常用行级标签</em><br>    按行逐一显示，前后不会自动换行<br>    文本格式化标签<br>        <code>&lt;b&gt;</code>定义粗体文本<br>        <code>&lt;i&gt;</code>定义斜体文本<br>        <code>&lt;em&gt;</code>定义强调文本<br>        <code>&lt;strong&gt;</code>定义粗体文本<br>        <code>&lt;sub&gt;</code>定义下标文本<br>        <code>&lt;sup&gt;</code>定义下标文本<br>        <code>&lt;bdo&gt;</code>定义文本显示方向，内有dir属性，取值只能为rtl/ltr<br>    超链接标签<code>&lt;a&gt;</code><br>        href   指定跳转到的网页的url<br>        target 指定框架中的哪个框架来装载另一个资源，该属性可以是<br>    图像标签<code>&lt;img&gt;</code><br>        src 图片地址<br>        alt 当图片不能正常打开时的提示文字<br>    span标签 <code>&lt;span&gt;</code>修饰文本等行级内容<br>    换行标签 <code>&lt;br/&gt;</code></p>
<hr>
<p><strong>四、html框架</strong><br>        <em>frameset框架集</em><br>            创建框架网页的步骤</p>
<pre><code>1. 创建各个子窗口对应的html文件
2. 创建整个框架文件，分别引用子窗口文件
</code></pre><p>创建frameset框架页面的基本语法<br>        <code>&lt;frameset cols=&quot;&quot; rows=&quot;&quot; border=&quot;&quot;&gt;</code><br>            <code>&lt;frame src=&quot;&quot; target=&quot;&quot;&gt;</code><br>        <code>&lt;/frameset&gt;</code></p>
<p>注意：<code>&lt;frameset&gt;</code>标签不能与<code>&lt;body&gt;</code>标签同时使用，除非你在<code>&lt;frameset&gt;</code>中使用<code>&lt;noframes&gt;</code>标签</p>
<pre><code>&lt;frameset&gt;标签的属性及值
属性      值            描述
cols   pixels,%,*    定义框架中列的数目及尺寸
rows   pixels,%,*     定义框架中行的数目及尺寸

&lt;frame&gt;标签的属性及值
        属性     值            描述
        norize   norize        框架边框不可拉伸
        src      html_name  引用的网页文件
        name     frame_name 框架的名字

iframe内嵌框架(作为body的一部分)
        属性             值                描述
        frameborder        0,1               框架有无边框
        name             frame_name      框架名字
        scrolling         yes,no,auto     框架是否显示滚动条
        src               html_name         在框架中显示的文档的url
</code></pre><hr>
<p><strong>五、表格标签</strong></p>
<pre><code>    表格相关元素
    &lt;table&gt;
        border 边框
        cellspacing  单元格与单元格之间的距离
        cellspadding 单元格内边距，即文字到单元格边框的距离
    &lt;caption&gt;
        定义表格的标题
    &lt;tr&gt;
        定义表格的行，只能包括th,td两种元素
    &lt;td&gt;
        colspan 横跨列数
        rowspan 横跨行数
    &lt;th&gt;
        定义表格页眉的单元格
    &lt;tbody&gt;
        定义表格体
    &lt;thead&gt;
        定义表格头
    &lt;tfoot&gt;
        定义表格脚

   表格标签使用场景
1. 主要用于规则的数据显示
2.适当的可以在表单页面使用

使用表格标签进行页面布局的缺点
1. 代码量大，页面浏览速度比较慢
2. 层次结构比较复杂，不易于维护和改版
3. 不利于搜索引擎搜索查找数据
</code></pre><hr>
<p>六、html表单</p>
<pre><code>form标签
    常用属性
    action
        提交表单给哪个url来处理
    method
        指定请求的方法，get/post/...
    enctype
        指定表单数据的编码方式
        mutipart/form-data 以二进制流的方式来处理表单
        application/x-www-form-urlencode 默认的编码方式，将表单控件的值处理成url编码的方式
        text/plain 当表单的action属性为mailto:url的形式时使用

常用的表单元素
    input元素
        text         单行文本框
        password    密码输入框
        hidden         隐藏域
        radio         单选框
        checkbox     复选框
        img         图像域，可以设置width和height属性
        file         文件上传域
        submit         提交
        reset         重置
        button         普通按钮
    input元素的常用属性
        name        设置元素名称
        value         设置元素值/默认值
        id            设置元素id，唯一表示一个元素
        checked     用在单选/复选框中，设置默认选中的项
        disabled     用在单选/复选框中，设置不可用的项
        maxlength     设置文本框/密码框最大输入字符
        readonly    设置文本框为只读,即不允许修改
        size         设置文本框/密码框的长度
        src            设置图像域所显示图片的url
    button元素(比input元素中的按钮更灵活、更强大)
        常用属性
        disabled    指定是否禁用此元素
        name          指定名称
        type         指定按钮类型，只能是button,reset,submit
    label元素
        常用属性
        for         当光标移到label标签上，关联的表单元素会获得焦点
    select列表框/下拉菜单(设置了size/multiple属性即为列表框)
        列表框/下拉菜单常用属性
            disabled     设置是否禁用此元素
            size        设置列表框显示的数目
            multiple      设置是否允许多选
        常用子元素
            option 定义
                常用属性
                disabled  设置是否禁用此元素
                selected  设置是否默认选中
                value        设置元素默认的值
            optgroup
                常用属性
                label        选项组名称
                disabeld  指定选项组是否被禁用
    textarea多行文本框
        常用属性
        cols   设置文本框的列宽，必填
        rows   设置文本框的行高，必填
        readonly 设置为只读，即不允许修改
</code></pre><p><strong>七、多媒体：web上的多媒体指的是音效、音乐、视频和动画，现代网络已经支持很多多媒体格式</strong></p>
<pre><code>常用的视频格式
    Flash    .flv/.swf
    Mpeg-4   .mp4
常用的音频格式
    WMA      .wma
    MP3        .mp3/.mpg3
音频和视频标签(不同浏览器的播放音频/视频的插件不同)
    &lt;embed&gt;所有的参数都写入标签体作为它的属性。
        常用属性
        src          设置视频/音频源
        width          设置视频/音频播放插件宽度
        height         设置视频/音频播放插件高度
        loop          设置是否循环播放
        autostart   设置是否自动播放
        PLUGINSPAGE 设置下载插件的网址(若没有相关插件)
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;一、html基本结构&lt;/strong&gt;&lt;br&gt;&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;  网页的所有内容都包含在内&lt;br&gt;&lt;code&gt;&amp;lt;hrad&amp;gt;&lt;/code&gt;  网页的标题&lt;br&gt;&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 网页的主体&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Html" scheme="http://yoursite.com/tags/Html/"/>
    
  </entry>
  
  <entry>
    <title>(转)远程计算机或设备将不接受连接，IE无法上网</title>
    <link href="http://yoursite.com/IE/"/>
    <id>http://yoursite.com/IE/</id>
    <published>2017-05-14T16:00:00.000Z</published>
    <updated>2017-05-20T15:37:25.809Z</updated>
    
    <content type="html"><![CDATA[<p>转载自 <a href="http://blog.csdn.net/love_java_cc/article/details/52198660" target="_blank" rel="external">http://blog.csdn.net/love_java_cc/article/details/52198660</a></p>
<p>遇到一个奇葩问题，IE浏览器突然不能上网了，但是其他浏览器可以，QQ什么的也都正常，只有IE是出现：远程计算机或设备将不接受连接 这个问题，网上找了很多答案都没用，什么设置WINS，允许远程访问，取消internet代理统统都试过了。最后的解决办法是：<br><a id="more"></a><br>1.win+r –&gt; 输入regedit 打开注册表</p>
<p>2.查找Internet Settings（在HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings）</p>
<p>3.删除Internet Settings下的Connection文件夹</p>
<p>4.重启IE，完美解决问题</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自 &lt;a href=&quot;http://blog.csdn.net/love_java_cc/article/details/52198660&quot;&gt;http://blog.csdn.net/love_java_cc/article/details/52198660&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;遇到一个奇葩问题，IE浏览器突然不能上网了，但是其他浏览器可以，QQ什么的也都正常，只有IE是出现：远程计算机或设备将不接受连接 这个问题，网上找了很多答案都没用，什么设置WINS，允许远程访问，取消internet代理统统都试过了。最后的解决办法是：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Pieces" scheme="http://yoursite.com/categories/Pieces/"/>
    
    
      <category term="IE" scheme="http://yoursite.com/tags/IE/"/>
    
  </entry>
  
  <entry>
    <title>SpingMVC_Study Note(1)</title>
    <link href="http://yoursite.com/springmvc-1/"/>
    <id>http://yoursite.com/springmvc-1/</id>
    <published>2017-05-13T16:00:00.000Z</published>
    <updated>2017-05-15T14:48:25.770Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一、SpringMVC简述</strong><br>SpringMVC 是一个模型-视图-控制(Model-View-Controller)框架,它建立在一个前端控制器(DispatcherServlet)之上，能够帮你建立一个像Spring框架一样灵活和松耦合的Web应用程序。</p>
<a id="more"></a>
<p>《Spring实战》中这样描述了SpringMVC中请求的处理:</p>
<blockquote>
<ol>
<li>请求的第一站是前端控制器(DispatcherServlet)，在这里一个单实例的Servlet将请求委托给应用程序的其他组件来处理，<br>即将请求发送给控制器(Controller)。</li>
<li>应用程序中有多个处理器，DispatcherServlet需要查询处理器映射(HandlerMapping)来确定要将请求发送给哪个控制器。</li>
<li>DispatcherServlet将请求发送给具体的控制器后，控制器在完成逻辑处理后，通常会产生一些需要返回给浏览器显示的信息，<br>这些信息被称为模型(Model)。</li>
<li>不过仅仅返回给用户原始的信息是不够的,通常需要将信息发送给视图(View),通常是JSP，以用户友好的方式进行格式化。所以控制器会将<br>模型数据打包，并且标识出用于格式化这些模型数据的视图，再将模型数据和视图名一起发送给DispatcherServlet。</li>
<li>传递给DispatcherServlet的视图名并表示具体的视图，只是一个逻辑视图名。DispatcherServlet会使用视图解析器(View Resolver)来将逻辑视图名解析为一个物理视图。</li>
<li>DispatcherServlet将模型数据发送给物理视图。</li>
<li>视图将使用模型数据渲染输出，并将输出通过响应对象返回给客户端(浏览器)。</li>
</ol>
</blockquote>
<hr>
<p><strong>二、搭建SpringMVC环境并开始第一个SpringMVC Web应用程序</strong></p>
<p><strong>1.导入需要的jar包</strong><br>commons-logging-1.1.3.jar<br>spring-aop-4.0.0.RELEASE.jar<br>spring-beans-4.0.0.RELEASE.jar<br>spring-context-4.0.0.RELEASE.jar<br>spring-core-4.0.0.RELEASE.jar<br>spring-expression-4.0.0.RELEASE.jar<br>spring-web-4.0.0.RELEASE.jar<br>spring-webmvc-4.0.0.RELEASE.jar</p>
<p>其中除了commons-logging为日志支持jar包需要单独下载,其他的包都在spring-framework-4.0.0.RELEASE中。</p>
<p><strong>2.配置web.xml文件</strong></p>
<p>配置DispatcherServlet<br>①使用默认的 Spring MVC DispatcherServlet 读取 xml 配置文件的原则：<br>  servlet-name ==&gt; /WEB-INF/servlet-name-servlet.xml(Spring的xml文件路径及文件名)</p>
<pre><code>&lt;servlet&gt;        
&lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;
    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;
&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
&lt;/servlet&gt;
&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
</code></pre><p>②自行指定DispatcherServlet的要读取的xml文件的实际位置<br>如：<br>    <code>&lt;init-param&gt;</code><br>            <code>&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</code><br>            <code>&lt;param-value&gt;/WEB-INF/springmvc.xml&lt;/param-value&gt;</code><br>    <code>&lt;/init-param&gt;</code></p>
<p><strong>3.配置spring的xml文件</strong></p>
<p>组件的自动扫描<br><code>&lt;context:component-scan basepackage=&quot;com.jzf.springmvc&quot;&gt;``&lt;/context:component-scan&gt;</code></p>
<p><strong>4.具体的控制器</strong></p>
<pre><code>/**
 * 具体的控制器(处理器)：处理请求，并返回逻辑视图
 * @RequestMapping 表示这个类/方法能处理请求的url
 */
@Controller
public class Hello {
@RequestMapping(&quot;/hello&quot;) 
public String helloworld(){
System.out.println(&quot;helloworld&quot;);
return &quot;success&quot;;
    }
}
</code></pre><p><strong>5.在spring的xml文件中配置视图解析器</strong></p>
<pre><code>&lt;!-- 配置视图解析器，将处理器方法返回的值解析为具体的视图 --&gt;
    &lt;bean
        class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;
        &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/views/&quot;&gt;&lt;/property&gt;
        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;
    &lt;/bean&gt;
</code></pre><p>视图解析器将控制器返回的逻辑视图解析为具体的物理视图，规则如下：<br>prefix+returnValue+suffix ==&gt; 物理视图</p>
<p><strong>6.具体的视图(如jsp)</strong></p>
<pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=ISO-8859-1&quot;
    pageEncoding=&quot;ISO-8859-1&quot;%&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=ISO-8859-1&quot;&gt;
&lt;title&gt;Insert title here&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;a href=&quot;hello&quot;&gt;hello&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;一、SpringMVC简述&lt;/strong&gt;&lt;br&gt;SpringMVC 是一个模型-视图-控制(Model-View-Controller)框架,它建立在一个前端控制器(DispatcherServlet)之上，能够帮你建立一个像Spring框架一样灵活和松耦合的Web应用程序。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="SpringMVC" scheme="http://yoursite.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>Servlet-download file/upload file</title>
    <link href="http://yoursite.com/servlet-downandup/"/>
    <id>http://yoursite.com/servlet-downandup/</id>
    <published>2017-05-12T16:00:00.000Z</published>
    <updated>2017-05-20T15:22:03.456Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1.content-disposition</strong><br>实现文件的上传与下载都需要用到content-disposition头，content-disposition 是 MIME 协议的<br>扩展，MIME 协议指示 MIME 用户代理如何显示附加的文件。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><p><strong>2.文件下载</strong></p>
<p>浏览器直接打开文件(必须是浏览器支持直接打开的类型 如：txt,jpg等)<br><code>content-disposition=&quot;inline;filename=XX.XXX&quot;</code><br>弹出对话框选择是保存还是打开<br><code>content-disposition=&quot;attachment;filename=XX.XXX&quot;</code></p>
<pre><code>@WebServlet(&quot;/DownloadServlet&quot;)
public class DownloadServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;

    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        doPost(request, response);
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.setCharacterEncoding(&quot;utf-8&quot;);
        // 告诉浏览器文件类型为PDF
        response.setContentType(&quot;application/pdf;charset=utf-8&quot;);
        // 设置返回时，弹出对话框来选择是保存还是打开
        response.setHeader(&quot;content-disposition&quot;, &quot;attachment;filename=ThinkingInJava.pdf&quot;);
        // 得到文件的绝对路径
        String file = request.getServletContext().getRealPath(&quot;/WEB-INF/uploadFile/ThinkingInJava.pdf&quot;);
        // 读取文件
        InputStream in = new FileInputStream(file);

        OutputStream out = response.getOutputStream();

        byte[] buff = new byte[1024 * 1024];
        int length = 0;
        while ((length = in.read(buff)) &gt; 0) {
            // 将文件写入输出流
            out.write(buff, 0, length);
        }
        in.close();
    }
}
</code></pre><hr>
<p><strong>3.文件上传</strong><br><em>3.1 Servlet3.0提供了对文件上传的支持。</em><br>HttpServletRequest 提供了两个方法用于从请求中解析出上传的文件：</p>
<ul>
<li><code>Part getPart(String name)</code></li>
<li><code>Collection&lt;Part&gt; getParts()</code></li>
</ul>
<p><em>3.2 @MultipartConfig</em><br>要在servlet中使用文件上传功能，还需将servlet打上注解@MultipartConfig<br>该注解主要是为了辅助 Servlet 3.0 中 HttpServletRequest 提供的对上传文件的支持。该注解标注在 Servlet 上面，以表示该 Servlet 希望处理的请求的 MIME 类型是 multipart/form-data。</p>
<p><em>3.3 如果请求的MIME类型不是multipart/form-data,则不能使用上述的两个方法来得到上传的文件。</em><br>所以，在表单中属性中要加上 enctype=”multipart/form-data”</p>
<p><em>3.4文件上传的代码实现</em></p>
<p>表单提交页面</p>
<pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot;
    pageEncoding=&quot;utf-8&quot;%&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;文件上传&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;fieldset&gt;
        &lt;legend&gt;文件上传&lt;/legend&gt;
        &lt;form action=&quot;${pageContext.request.contextPath}/UploadServlet&quot;
            method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;
            &lt;input type=&quot;file&quot; name=&quot;file&quot;&gt; 
            &lt;br/&gt;
            &lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;
        &lt;/form&gt;
    &lt;/fieldset&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><hr>
<p>实现文件上传的servlet</p>
<pre><code>@WebServlet(&quot;/UploadServlet&quot;)
@MultipartConfig //标识这是一个处理请求类型为multipart/form-data的servlet
public class UploadServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;

    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        doPost(request, response);
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.setCharacterEncoding(&quot;utf-8&quot;);
        response.setContentType(&quot;text/html;charset=utf-8&quot;);
        PrintWriter out = response.getWriter();

        //得到存储路径
        String savePath = request.getServletContext().getRealPath(&quot;/WEB-INF/uploadFile&quot;);
        //得到上传的文件对象
        Part part = request.getPart(&quot;file&quot;);
        //获得关于content-disposition头的信息
        String header = part.getHeader(&quot;Content-Disposition&quot;);
        //得到文件名
        String fileName = getFileName(header);
        //存储文件
        part.write(savePath + File.separator + fileName);

        out.println(&quot;上传成功&quot;);
        out.flush();
        out.close();
    }
    /**
     * 从Content-Disposition头中解析出文件名
     * content-disposition头实例  如：Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;jsdk23.chm&quot;
     */
    private String getFileName(String header) {
        String[] tempArr1 = header.split(&quot;;&quot;);
        String[] tempArr2 = tempArr1[2].split(&quot;=&quot;);
        String fileName = tempArr2[1].substring(tempArr2[1].lastIndexOf(&quot;\\&quot;) + 1).replaceAll(&quot;\&quot;&quot;, &quot;&quot;);
        return fileName;
    }
}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;1.content-disposition&lt;/strong&gt;&lt;br&gt;实现文件的上传与下载都需要用到content-disposition头，content-disposition 是 MIME 协议的&lt;br&gt;扩展，MIME 协议指示 MIME 用户代理如何显示附加的文件。&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="Servlet" scheme="http://yoursite.com/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>BeanUtils的使用</title>
    <link href="http://yoursite.com/BeanUtils/"/>
    <id>http://yoursite.com/BeanUtils/</id>
    <published>2017-05-05T16:00:00.000Z</published>
    <updated>2017-05-07T02:14:43.951Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1.什么是BeanUtils</strong><br>commons-beanutils 是apache commons子项目中的一个软件包，其主要目的是利用反射机制对JavaBean的属性进行处理。<br><a id="more"></a><br><strong>2.需要的环境</strong><br>使用BeanUtils需要commons-beanutils 和commons-logging两个jar包</p>
<p><strong>3.常用API</strong><br>BeanUtils：顾名思义就是对bean进行操作的工具类。<br>常用方法</p>
<p><code>static void  setProperty(Object bean,String name,Object value)</code><br>将value的值付给bean的指定属性(需要注意的是，如果属性类型是基本类型，BeanUtils内部已经帮我们实现了自动转换;如果不是基本类型则需要注册相应的转换器)。</p>
<p><code>static void     populate(Object bean, Map&lt;String,? extends Object&gt; properties)</code><br>将Map中的值赋给bean中相应的属性，其中Map中的键名必须与bean的属性名相同(同样，如果是非基本类型，需要注册相应的转换器)。</p>
<p>ConvertUtils：用来注册转换器的工具类</p>
<p>常用方法<br><code>static void     register(Converter converter, Class&lt;?&gt; clazz)</code><br>为clazz字节码对象对应的属性类型注册转换器(如属性值为Date类型，则clazz=Date.class())。</p>
<p>Convert：即转换器接口，可通过实现这个接口来实现自定义的转换器类</p>
<p>这个接口只有一个方法<br><code>&lt;T&gt; T convert(Class&lt;T&gt; type,Object value)</code></p>
<p>commons-beanutils也为我们提供了众多的转换器类<br>如 BigDecimalConverte,DateConverter, DateLocaleConverter, URLConverter等。</p>
<p><strong>4.实例</strong></p>
<p>Person(JavaBean)</p>
<pre><code>import java.util.Date;

public class Person {
    private int id;
    private String name;
    private String sex;
    private Date birthday;

public Date getBirthday() {
    return birthday;
}

public void setBirthday(Date birthday) {
    this.birthday = birthday;
}

public int getId() {
    return id;
}

public void setId(int id) {
    this.id = id;
}

public String getName() {
    return name;
}

public void setName(String name) {
    this.name = name;
}

public String getSex() {
    return sex;
}

public void setSex(String sex) {
    this.sex = sex;
}

}
</code></pre><hr>
<p><strong>利用BeanUtils对bean进行行相关操作</strong></p>
<pre><code>import java.lang.reflect.InvocationTargetException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.beanutils.ConversionException;
import org.apache.commons.beanutils.ConvertUtils;
import org.apache.commons.beanutils.Converter;
import org.apache.commons.beanutils.locale.converters.DateLocaleConverter;

public class BeanUtilsTest {

    /**
     * 利用BeanUtils给bean相关属性赋值
     */
    public void test(){
    Person p =new Person();
    try {
        BeanUtils.setProperty(p, &quot;name&quot;, &quot;James&quot;); //默认只支持基本类型的转换
        System.out.println(p.getName());

    } catch (IllegalAccessException | InvocationTargetException e) {
        e.printStackTrace();
    }
}

/**
 * 自定义转换器类并注册
 */
@SuppressWarnings(&quot;deprecation&quot;)
public void test2(){
    Person p = new Person();
    String date=&quot;2017-5-6&quot;;

    ConvertUtils.register(new Converter() { //为BeanUtils注册字符串转成日期类型的转换器，

        @SuppressWarnings(&quot;unchecked&quot;)
        @Override
        public &lt;T&gt; T convert(Class&lt;T&gt; type, Object value) {
            if(value == null){
                return null;
            }

            if(!(value instanceof String)){
                throw new ConversionException(&quot;只支持string类型的转换&quot;);
            }

            SimpleDateFormat sdf=new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
            try {
                 return (T) sdf.parse((String) value);

            } catch (ParseException e) {
                throw new RuntimeException(e);
            }
        }


    }, Date.class);

    try {
        BeanUtils.setProperty(p, &quot;birthday&quot;, date);
        System.out.println(p.getBirthday().toLocaleString());
    } catch (IllegalAccessException | InvocationTargetException e) {
        throw new RuntimeException(&quot;转换出错！&quot;);
    }
}

/**
 * 用Map来填充bean的属性
 */
public void test3() {
    Person person = new Person();
    Map map = new HashMap();
    map.put(&quot;name&quot;, &quot;James&quot;);
    map.put(&quot;sex&quot;, &quot;男&quot;);
    map.put(&quot;birthday&quot;, &quot;1984-6-5&quot;);
    map.put(&quot;id&quot;, &quot;3&quot;);

    ConvertUtils.register(new DateLocaleConverter(), Date.class);

    try {
        BeanUtils.populate(person, map); 
        System.out.println(person.getBirthday());
    } catch (IllegalAccessException | InvocationTargetException e) {
        throw new RuntimeException(&quot;转换出错&quot;);
    }
}

}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;1.什么是BeanUtils&lt;/strong&gt;&lt;br&gt;commons-beanutils 是apache commons子项目中的一个软件包，其主要目的是利用反射机制对JavaBean的属性进行处理。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Utils" scheme="http://yoursite.com/tags/Utils/"/>
    
  </entry>
  
  <entry>
    <title>防表单重复提交</title>
    <link href="http://yoursite.com/DuplicateForm/"/>
    <id>http://yoursite.com/DuplicateForm/</id>
    <published>2017-05-03T16:00:00.000Z</published>
    <updated>2017-05-21T15:23:17.888Z</updated>
    
    <content type="html"><![CDATA[<p><strong>主要分为三步</strong></p>
<ol>
<li>先通过向一个servlet发起请求，生成令牌，存入session域中，跳转到表单提交页面</li>
<li>在表单提交页面通过隐藏域取出令牌，提交表单</li>
<li>跳转到表单验证页面，取出session中的令牌与用户携带的令牌比较，若相等，则是第一次提交，通过验证，随即删除session域中的令牌。则如果再次请求（直接请求表单验证页面），刷新等，由于服务端，即session域中的令牌已经不存在，则提示请勿重复提交表单。</li>
</ol>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><p><strong>生成令牌的servlet代码</strong></p>
<pre><code>import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Random;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import sun.misc.BASE64Encoder;

public class FormServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;

    protected void doGet(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException {
    doPost(request, response);
}

    protected void doPost(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException {
    request.setCharacterEncoding(&quot;utf-8&quot;);
    response.setContentType(&quot;text/html;charset=utf-8&quot;);

    TokenProcess tp = TokenProcess.getInsetance();
    String token = tp.generateToken(); // 生成令牌
    request.getSession().setAttribute(&quot;token&quot;, token); // 将令牌存于session域
    request.getRequestDispatcher(&quot;/Login4.jsp&quot;).forward(request, response);

}
}

/**
 * 使用单例模式创建一个令牌类
 * @author jiazhengfeng
 */
class TokenProcess {
    private static TokenProcess instance = new TokenProcess();

    private TokenProcess() {
    };

    public static TokenProcess getInsetance() {
        return instance;
    }

    public String generateToken() {
        String token = System.currentTimeMillis() + new Random().nextInt() + &quot;&quot;;

        try {
            MessageDigest md = MessageDigest.getInstance(&quot;md5&quot;);
            byte[] md5 = md.digest(token.getBytes()); // 得到token的消息摘要
            BASE64Encoder encoder = new BASE64Encoder();
            return encoder.encode(md5); // 用base64编码摘要并返回
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }
}
</code></pre><hr>
<p><strong>一个简单的jsp登录页面</strong></p>
<pre><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot;
pageEncoding=&quot;utf-8&quot;%&gt;
&lt;%@taglib prefix=&quot;simpletag&quot; uri=&quot;http://www.simpletag.com&quot; %&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
&lt;title&gt;Insert title here&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
   &lt;form action=&quot;/LoginWithVerifyCode/DoFormServlet&quot; method=&quot;post&quot; &gt;
  &lt;fieldset&gt;
  &lt;legend&gt;请登录&lt;/legend&gt;
  &lt;input type=&quot;hidden&quot; name=&quot;token&quot; value=&quot;${token}&quot;&gt;  &lt;%--隐藏域 用于传递token --%&gt;
   User:&lt;br/&gt;
   &lt;input type=&quot;text&quot; name=&quot;user&quot;&gt;&lt;br/&gt;
   Password:&lt;br/&gt;
   &lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;br/&gt;
   &lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;
   &lt;/fieldset&gt;
   &lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><hr>
<p><strong>验证表单的servlet代码</strong></p>
<pre><code>import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class DoFormServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;

    protected void doGet(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException {
    doPost(request, response);
}

/**
     * 利用令牌防止表单重复提交
     */
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException {
        request.setCharacterEncoding(&quot;utf-8&quot;);
        response.setContentType(&quot;text/html;charset=utf-8&quot;);

        boolean b = isTokenValid(request);
        if (!b) {
            System.out.println(&quot;请勿重复提交表单&quot;);
            return;
        }

        request.getSession().removeAttribute(&quot;token&quot;);
        System.out.println(&quot;向数据库存入数据&quot;);

    }

    /**
     * 判断令牌是否有效
     * 
     * @param request
     * @return
     */
    private boolean isTokenValid(HttpServletRequest request) {
        String client_token = request.getParameter(&quot;token&quot;); // 得到表单隐藏域的令牌
        String server_token = (String) request.getSession().getAttribute(&quot;token&quot;); // 得到服务器端session域的令牌

        if (client_token == null) { // 如果表单格式有错误或者伪造表单
            return false;
        }

        if (server_token == null) { // 如果服务器端不存在令牌
            return false;
        }

        if (server_token.equals(client_token)) {
            return true;
        }

        return false;
    }
    }
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;主要分为三步&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先通过向一个servlet发起请求，生成令牌，存入session域中，跳转到表单提交页面&lt;/li&gt;
&lt;li&gt;在表单提交页面通过隐藏域取出令牌，提交表单&lt;/li&gt;
&lt;li&gt;跳转到表单验证页面，取出session中的令牌与用户携带的令牌比较，若相等，则是第一次提交，通过验证，随即删除session域中的令牌。则如果再次请求（直接请求表单验证页面），刷新等，由于服务端，即session域中的令牌已经不存在，则提示请勿重复提交表单。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
    
    </summary>
    
      <category term="JavaWeb" scheme="http://yoursite.com/categories/JavaWeb/"/>
    
    
      <category term="Servlet" scheme="http://yoursite.com/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>关于java.util.Date与java.sql.Date</title>
    <link href="http://yoursite.com/Date/"/>
    <id>http://yoursite.com/Date/</id>
    <published>2017-05-02T16:00:00.000Z</published>
    <updated>2017-05-07T02:14:29.953Z</updated>
    
    <content type="html"><![CDATA[<p>1.java.sql.Date是java.util.Date的子类<br>2.将java.util.Date转成java.sql.Date<br><a id="more"></a><br>Date utilDate=new Date(); //java.util.Date<br>Date sqlDate=new Date(utilDate.getTime());//java.sql.Date</p>
<p>3.将字符串转成java.util.Date<br>String str=”1995-9-2”;<br>SimpleDateFormat sdf=new SimpleDateFormat(“yyyy-MM-dd”);<br>sdf.parse(str);</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.java.sql.Date是java.util.Date的子类&lt;br&gt;2.将java.util.Date转成java.sql.Date&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="JavaSE" scheme="http://yoursite.com/tags/JavaSE/"/>
    
  </entry>
  
</feed>
